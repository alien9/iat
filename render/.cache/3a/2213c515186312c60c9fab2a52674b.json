{"id":"node_modules/csv-parse/lib/index.js","dependencies":[{"name":"/home/tiago/works/iat_backend/package.json","includedInParent":true,"mtime":1577388715061},{"name":"/home/tiago/works/iat_backend/node_modules/csv-parse/package.json","includedInParent":true,"mtime":1577388714721},{"name":"stream","loc":{"line":9,"column":30},"parent":"/home/tiago/works/iat_backend/node_modules/csv-parse/lib/index.js","resolved":"/home/tiago/works/iat_backend/node_modules/stream-browserify/index.js"},{"name":"./ResizeableBuffer","loc":{"line":10,"column":33},"parent":"/home/tiago/works/iat_backend/node_modules/csv-parse/lib/index.js","resolved":"/home/tiago/works/iat_backend/node_modules/csv-parse/lib/ResizeableBuffer.js"},{"name":"buffer","parent":"/home/tiago/works/iat_backend/node_modules/csv-parse/lib/index.js","resolved":"/home/tiago/works/iat_backend/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n\n/*\nCSV Parse\n\nPlease look at the [project documentation](https://csv.js.org/parse/) for additional\ninformation.\n*/\n\nconst { Transform } = require('stream')\nconst ResizeableBuffer = require('./ResizeableBuffer')\n\nconst cr = 13\nconst nl = 10\nconst space = 32\nconst tab = 9\nconst bom_utf8 = Buffer.from([239, 187, 191])\n\nclass Parser extends Transform {\n  constructor(opts = {}){\n    super({...{readableObjectMode: true}, ...opts})\n    const options = {}\n    // Merge with user options\n    for(let opt in opts){\n      options[underscore(opt)] = opts[opt]\n    }\n    // Normalize option `bom`\n    if(options.bom === undefined || options.bom === null || options.bom === false){\n      options.bom = false\n    }else if(options.bom !== true){\n      throw new CsvError('CSV_INVALID_OPTION_BOM', [\n        'Invalid option bom:', 'bom must be true,',\n        `got ${JSON.stringify(options.bom)}`\n      ])\n    }\n    // Normalize option `cast`\n    let fnCastField = null\n    if(options.cast === undefined || options.cast === null || options.cast === false || options.cast === ''){\n      options.cast = undefined\n    }else if(typeof options.cast === 'function'){\n      fnCastField = options.cast\n      options.cast = true\n    }else if(options.cast !== true){\n      throw new CsvError('CSV_INVALID_OPTION_CAST', [\n        'Invalid option cast:', 'cast must be true or a function,',\n        `got ${JSON.stringify(options.cast)}`\n      ])\n    }\n    // Normalize option `cast_date`\n    if(options.cast_date === undefined || options.cast_date === null || options.cast_date === false || options.cast_date === ''){\n      options.cast_date = false\n    }else if(options.cast_date === true){\n      options.cast_date = function(value){\n        const date = Date.parse(value)\n        return !isNaN(date) ? new Date(date) : value\n      }\n    }else if(typeof options.cast_date !== 'function'){\n      throw new CsvError('CSV_INVALID_OPTION_CAST_DATE', [\n        'Invalid option cast_date:', 'cast_date must be true or a function,',\n        `got ${JSON.stringify(options.cast_date)}`\n      ])\n    }\n    // Normalize option `columns`\n    let fnFirstLineToHeaders = null\n    if(options.columns === true){\n      // Fields in the first line are converted as-is to columns\n      fnFirstLineToHeaders = undefined\n    }else if(typeof options.columns === 'function'){\n      fnFirstLineToHeaders = options.columns\n      options.columns = true\n    }else if(Array.isArray(options.columns)){\n      options.columns = normalizeColumnsArray(options.columns)\n    }else if(options.columns === undefined || options.columns === null || options.columns === false){\n      options.columns = false\n    }else{\n      throw new CsvError('CSV_INVALID_OPTION_COLUMNS', [\n        'Invalid option columns:',\n        'expect an object, a function or true,',\n        `got ${JSON.stringify(options.columns)}`\n      ])\n    }\n    // Normalize option `comment`\n    if(options.comment === undefined || options.comment === null || options.comment === false || options.comment === ''){\n      options.comment = null\n    }else{\n      if(typeof options.comment === 'string'){\n        options.comment = Buffer.from(options.comment)\n      }\n      if(!Buffer.isBuffer(options.comment)){\n        throw new CsvError('CSV_INVALID_OPTION_COMMENT', [\n          'Invalid option comment:',\n          'comment must be a buffer or a string,',\n          `got ${JSON.stringify(options.comment)}`\n        ])\n      }\n    }\n    // Normalize option `delimiter`\n    if(options.delimiter === undefined || options.delimiter === null || options.delimiter === false){\n      options.delimiter = Buffer.from(',')\n    }else if(typeof options.delimiter === 'string' && options.delimiter.length !== 0){\n      options.delimiter = Buffer.from(options.delimiter)\n    }else if(\n      (Buffer.isBuffer(options.delimiter) && options.delimiter.length === 0) ||\n      (typeof options.delimiter === 'string' && options.delimiter.length === 0) ||\n      (!Buffer.isBuffer(options.delimiter) && typeof options.delimiter !== 'string')\n    ){\n      throw new CsvError('CSV_INVALID_OPTION_DELIMITER', [\n        'Invalid option delimiter:',\n        'delimiter must be a non empty string or buffer,',\n        `got ${JSON.stringify(options.delimiter)}`\n      ])\n    }\n    // Normalize option `escape`\n    if(options.escape === undefined || options.escape === null){\n      options.escape = Buffer.from('\"')\n    }else if(typeof options.escape === 'string'){\n      options.escape = Buffer.from(options.escape)\n    }\n    if(!Buffer.isBuffer(options.escape)){\n      throw new Error(`Invalid Option: escape must be a buffer or a string, got ${JSON.stringify(options.escape)}`)\n    }else if(options.escape.length !== 1){\n      throw new Error(`Invalid Option Length: escape must be one character, got ${options.escape.length}`)\n    }else{\n      options.escape = options.escape[0]\n    }\n    // Normalize option `from`\n    if(options.from === undefined || options.from === null){\n      options.from = 1\n    }else{\n      if(typeof options.from === 'string' && /\\d+/.test(options.from)){\n        options.from = parseInt(options.from)\n      }\n      if(Number.isInteger(options.from)){\n        if(options.from < 0){\n          throw new Error(`Invalid Option: from must be a positive integer, got ${JSON.stringify(opts.from)}`)\n        }\n      }else{\n        throw new Error(`Invalid Option: from must be an integer, got ${JSON.stringify(options.from)}`)\n      }\n    }\n    // Normalize option `from_line`\n    if(options.from_line === undefined || options.from_line === null){\n      options.from_line = 1\n    }else{\n      if(typeof options.from_line === 'string' && /\\d+/.test(options.from_line)){\n        options.from_line = parseInt(options.from_line)\n      }\n      if(Number.isInteger(options.from_line)){\n        if(options.from_line <= 0){\n          throw new Error(`Invalid Option: from_line must be a positive integer greater than 0, got ${JSON.stringify(opts.from_line)}`)\n        }\n      }else{\n        throw new Error(`Invalid Option: from_line must be an integer, got ${JSON.stringify(opts.from_line)}`)\n      }\n    }\n    // Normalize option `info`\n    if(options.info === undefined || options.info === null || options.info === false){\n      options.info = false\n    }else if(options.info !== true){\n      throw new Error(`Invalid Option: info must be true, got ${JSON.stringify(options.info)}`)\n    }\n    // Normalize option `max_record_size`\n    if(options.max_record_size === undefined || options.max_record_size === null || options.max_record_size === false){\n      options.max_record_size = 0\n    }else if(Number.isInteger(options.max_record_size) && options.max_record_size >= 0){\n      // Great, nothing to do\n    }else if(typeof options.max_record_size === 'string' && /\\d+/.test(options.max_record_size)){\n      options.max_record_size = parseInt(options.max_record_size)\n    }else{\n      throw new Error(`Invalid Option: max_record_size must be a positive integer, got ${JSON.stringify(options.max_record_size)}`)\n    }\n    // Normalize option `objname`\n    if(options.objname === undefined || options.objname === null || options.objname === false){\n      options.objname = undefined\n    }else if(Buffer.isBuffer(options.objname)){\n      if(options.objname.length === 0){\n        throw new Error(`Invalid Option: objname must be a non empty buffer`)\n      }\n      options.objname = options.objname.toString()\n    }else if(typeof options.objname === 'string'){\n      if(options.objname.length === 0){\n        throw new Error(`Invalid Option: objname must be a non empty string`)\n      }\n      // Great, nothing to do\n    }else{\n      throw new Error(`Invalid Option: objname must be a string or a buffer, got ${options.objname}`)\n    }\n    // Normalize option `on_record`\n    if(options.on_record === undefined || options.on_record === null){\n      options.on_record = undefined\n    }else if(typeof options.on_record !== 'function'){\n      throw new CsvError('CSV_INVALID_OPTION_ON_RECORD', [\n        'Invalid option `on_record`:',\n        'expect a function,',\n        `got ${JSON.stringify(options.on_record)}`\n      ])\n    }\n    // Normalize option `quote`\n    if(options.quote === null || options.quote === false || options.quote === ''){\n      options.quote = null\n    }else{\n      if(options.quote === undefined || options.quote === true){\n        options.quote = Buffer.from('\"')\n      }else if(typeof options.quote === 'string'){\n        options.quote = Buffer.from(options.quote)\n      }\n      if(!Buffer.isBuffer(options.quote)){\n        throw new Error(`Invalid Option: quote must be a buffer or a string, got ${JSON.stringify(options.quote)}`)\n      }else if(options.quote.length !== 1){\n        throw new Error(`Invalid Option Length: quote must be one character, got ${options.quote.length}`)\n      }else{\n        options.quote = options.quote[0]\n      }\n    }\n    // Normalize option `raw`\n    if(options.raw === undefined || options.raw === null || options.raw === false){\n      options.raw = false\n    }else if(options.raw !== true){\n      throw new Error(`Invalid Option: raw must be true, got ${JSON.stringify(options.raw)}`)\n    }\n    // Normalize option `record_delimiter`\n    if(!options.record_delimiter){\n      options.record_delimiter = []\n    }else if(!Array.isArray(options.record_delimiter)){\n      options.record_delimiter = [options.record_delimiter]\n    }\n    options.record_delimiter = options.record_delimiter.map( function(rd){\n      if(typeof rd === 'string'){\n        rd = Buffer.from(rd)\n      }\n      return rd\n    })\n    // Normalize option `relax`\n    if(typeof options.relax === 'boolean'){\n      // Great, nothing to do\n    }else if(options.relax === undefined || options.relax === null){\n      options.relax = false\n    }else{\n      throw new Error(`Invalid Option: relax must be a boolean, got ${JSON.stringify(options.relax)}`)\n    }\n    // Normalize option `relax_column_count`\n    if(typeof options.relax_column_count === 'boolean'){\n      // Great, nothing to do\n    }else if(options.relax_column_count === undefined || options.relax_column_count === null){\n      options.relax_column_count = false\n    }else{\n      throw new Error(`Invalid Option: relax_column_count must be a boolean, got ${JSON.stringify(options.relax_column_count)}`)\n    }\n    if(typeof options.relax_column_count_less === 'boolean'){\n      // Great, nothing to do\n    }else if(options.relax_column_count_less === undefined || options.relax_column_count_less === null){\n      options.relax_column_count_less = false\n    }else{\n      throw new Error(`Invalid Option: relax_column_count_less must be a boolean, got ${JSON.stringify(options.relax_column_count_less)}`)\n    }\n    if(typeof options.relax_column_count_more === 'boolean'){\n      // Great, nothing to do\n    }else if(options.relax_column_count_more === undefined || options.relax_column_count_more === null){\n      options.relax_column_count_more = false\n    }else{\n      throw new Error(`Invalid Option: relax_column_count_more must be a boolean, got ${JSON.stringify(options.relax_column_count_more)}`)\n    }\n    // Normalize option `skip_empty_lines`\n    if(typeof options.skip_empty_lines === 'boolean'){\n      // Great, nothing to do\n    }else if(options.skip_empty_lines === undefined || options.skip_empty_lines === null){\n      options.skip_empty_lines = false\n    }else{\n      throw new Error(`Invalid Option: skip_empty_lines must be a boolean, got ${JSON.stringify(options.skip_empty_lines)}`)\n    }\n    // Normalize option `skip_lines_with_empty_values`\n    if(typeof options.skip_lines_with_empty_values === 'boolean'){\n      // Great, nothing to do\n    }else if(options.skip_lines_with_empty_values === undefined || options.skip_lines_with_empty_values === null){\n      options.skip_lines_with_empty_values = false\n    }else{\n      throw new Error(`Invalid Option: skip_lines_with_empty_values must be a boolean, got ${JSON.stringify(options.skip_lines_with_empty_values)}`)\n    }\n    // Normalize option `skip_lines_with_error`\n    if(typeof options.skip_lines_with_error === 'boolean'){\n      // Great, nothing to do\n    }else if(options.skip_lines_with_error === undefined || options.skip_lines_with_error === null){\n      options.skip_lines_with_error = false\n    }else{\n      throw new Error(`Invalid Option: skip_lines_with_error must be a boolean, got ${JSON.stringify(options.skip_lines_with_error)}`)\n    }\n    // Normalize option `rtrim`\n    if(options.rtrim === undefined || options.rtrim === null || options.rtrim === false){\n      options.rtrim = false\n    }else if(options.rtrim !== true){\n      throw new Error(`Invalid Option: rtrim must be a boolean, got ${JSON.stringify(options.rtrim)}`)\n    }\n    // Normalize option `ltrim`\n    if(options.ltrim === undefined || options.ltrim === null || options.ltrim === false){\n      options.ltrim = false\n    }else if(options.ltrim !== true){\n      throw new Error(`Invalid Option: ltrim must be a boolean, got ${JSON.stringify(options.ltrim)}`)\n    }\n    // Normalize option `trim`\n    if(options.trim === undefined || options.trim === null || options.trim === false){\n      options.trim = false\n    }else if(options.trim !== true){\n      throw new Error(`Invalid Option: trim must be a boolean, got ${JSON.stringify(options.trim)}`)\n    }\n    // Normalize options `trim`, `ltrim` and `rtrim`\n    if(options.trim === true && opts.ltrim !== false){\n      options.ltrim = true\n    }else if(options.ltrim !== true){\n      options.ltrim = false\n    }\n    if(options.trim === true && opts.rtrim !== false){\n      options.rtrim = true\n    }else if(options.rtrim !== true){\n      options.rtrim = false\n    }\n    // Normalize option `to`\n    if(options.to === undefined || options.to === null){\n      options.to = -1\n    }else{\n      if(typeof options.to === 'string' && /\\d+/.test(options.to)){\n        options.to = parseInt(options.to)\n      }\n      if(Number.isInteger(options.to)){\n        if(options.to <= 0){\n          throw new Error(`Invalid Option: to must be a positive integer greater than 0, got ${JSON.stringify(opts.to)}`)\n        }\n      }else{\n        throw new Error(`Invalid Option: to must be an integer, got ${JSON.stringify(opts.to)}`)\n      }\n    }\n    // Normalize option `to_line`\n    if(options.to_line === undefined || options.to_line === null){\n      options.to_line = -1\n    }else{\n      if(typeof options.to_line === 'string' && /\\d+/.test(options.to_line)){\n        options.to_line = parseInt(options.to_line)\n      }\n      if(Number.isInteger(options.to_line)){\n        if(options.to_line <= 0){\n          throw new Error(`Invalid Option: to_line must be a positive integer greater than 0, got ${JSON.stringify(opts.to_line)}`)\n        }\n      }else{\n        throw new Error(`Invalid Option: to_line must be an integer, got ${JSON.stringify(opts.to_line)}`)\n      }\n    }\n    this.info = {\n      comment_lines: 0,\n      empty_lines: 0,\n      invalid_field_length: 0,\n      lines: 1,\n      records: 0\n    }\n    this.options = options\n    this.state = {\n      bomSkipped: false,\n      castField: fnCastField,\n      commenting: false,\n      enabled: options.from_line === 1,\n      escaping: false,\n      escapeIsQuote: options.escape === options.quote,\n      expectedRecordLength: options.columns === null ? 0 : options.columns.length,\n      field: new ResizeableBuffer(20),\n      firstLineToHeaders: fnFirstLineToHeaders,\n      info: Object.assign({}, this.info),\n      previousBuf: undefined,\n      quoting: false,\n      stop: false,\n      rawBuffer: new ResizeableBuffer(100),\n      record: [],\n      recordHasError: false,\n      record_length: 0,\n      recordDelimiterMaxLength: options.record_delimiter.length === 0 ? 2 : Math.max(...options.record_delimiter.map( (v) => v.length)),\n      trimChars: [Buffer.from(' ')[0], Buffer.from('\\t')[0]],\n      wasQuoting: false,\n      wasRowDelimiter: false\n    }\n  }\n  // Implementation of `Transform._transform`\n  _transform(buf, encoding, callback){\n    if(this.state.stop === true){\n      return\n    }\n    const err = this.__parse(buf, false)\n    if(err !== undefined){\n      this.state.stop = true\n    }\n    callback(err)\n  }\n  // Implementation of `Transform._flush`\n  _flush(callback){\n    if(this.state.stop === true){\n      return\n    }\n    const err = this.__parse(undefined, true)\n    callback(err)\n  }\n  // Central parser implementation\n  __parse(nextBuf, end){\n    const {bom, comment, escape, from_line, info, ltrim, max_record_size, quote, raw, relax, rtrim, skip_empty_lines, to, to_line} = this.options\n    let {record_delimiter} = this.options\n    const {bomSkipped, previousBuf, rawBuffer, escapeIsQuote} = this.state\n    let buf\n    if(previousBuf === undefined){\n      if(nextBuf === undefined){\n        // Handle empty string\n        this.push(null)\n        return\n      }else{\n        buf = nextBuf\n      }\n    }else if(previousBuf !== undefined && nextBuf === undefined){\n      buf = previousBuf\n    }else{\n      buf = Buffer.concat([previousBuf, nextBuf])\n    }\n    // Handle UTF BOM\n    if(bomSkipped === false){\n      if(bom === false){\n        this.state.bomSkipped = true\n      }else if(buf.length < 3){\n        // No enough data\n        if(end === false){\n          // Wait for more data\n          this.state.previousBuf = buf\n          return\n        }\n        // skip BOM detect because data length < 3\n      }else{\n        if(bom_utf8.compare(buf, 0, 3) === 0){\n          // Skip BOM\n          buf = buf.slice(3)\n        }\n        this.state.bomSkipped = true\n      }\n    }\n    const bufLen = buf.length\n    let pos\n    for(pos = 0; pos < bufLen; pos++){\n      // Ensure we get enough space to look ahead\n      // There should be a way to move this out of the loop\n      if(this.__needMoreData(pos, bufLen, end)){\n        break\n      }\n      if(this.state.wasRowDelimiter === true){\n        this.info.lines++\n        if(info === true && this.state.record.length === 0 && this.state.field.length === 0 && this.state.wasQuoting === false){\n          this.state.info = Object.assign({}, this.info)\n        }\n        this.state.wasRowDelimiter = false\n      }\n      if(to_line !== -1 && this.info.lines > to_line){\n        this.state.stop = true\n        this.push(null)\n        return\n      }\n      // Auto discovery of record_delimiter, unix, mac and windows supported\n      if(this.state.quoting === false && record_delimiter.length === 0){\n        const record_delimiterCount = this.__autoDiscoverRowDelimiter(buf, pos)\n        if(record_delimiterCount){\n          record_delimiter = this.options.record_delimiter\n        }\n      }\n      const chr = buf[pos]\n      if(raw === true){\n        rawBuffer.append(chr)\n      }\n      if((chr === cr || chr === nl) && this.state.wasRowDelimiter === false ){\n        this.state.wasRowDelimiter = true\n      }\n      // Previous char was a valid escape char\n      // treat the current char as a regular char\n      if(this.state.escaping === true){\n        this.state.escaping = false\n      }else{\n        // Escape is only active inside quoted fields\n        // We are quoting, the char is an escape chr and there is a chr to escape\n        if(this.state.quoting === true && chr === escape && pos + 1 < bufLen){\n          if(escapeIsQuote){\n            if(buf[pos+1] === quote){\n              this.state.escaping = true\n              continue\n            }\n          }else{\n            this.state.escaping = true\n            continue\n          }\n        }\n        // Not currently escaping and chr is a quote\n        // TODO: need to compare bytes instead of single char\n        if(this.state.commenting === false && chr === quote){\n          if(this.state.quoting === true){\n            const nextChr = buf[pos+1]\n            const isNextChrTrimable = rtrim && this.__isCharTrimable(nextChr)\n            // const isNextChrComment = nextChr === comment\n            const isNextChrComment = comment !== null && this.__compareBytes(comment, buf, pos+1, nextChr)\n            const isNextChrDelimiter = this.__isDelimiter(nextChr, buf, pos+1)\n            const isNextChrRowDelimiter = record_delimiter.length === 0 ? this.__autoDiscoverRowDelimiter(buf, pos+1) : this.__isRecordDelimiter(nextChr, buf, pos+1)\n            // Escape a quote\n            // Treat next char as a regular character\n            // TODO: need to compare bytes instead of single char\n            if(chr === escape && nextChr === quote){\n              pos++\n            }else if(!nextChr || isNextChrDelimiter || isNextChrRowDelimiter || isNextChrComment || isNextChrTrimable){\n              this.state.quoting = false\n              this.state.wasQuoting = true\n              continue\n            }else if(relax === false){\n              const err = this.__error(\n                new CsvError('CSV_INVALID_CLOSING_QUOTE', [\n                  'Invalid Closing Quote:',\n                  `got \"${String.fromCharCode(nextChr)}\"`,\n                  `at line ${this.info.lines}`,\n                  'instead of delimiter, row delimiter, trimable character',\n                  '(if activated) or comment',\n                ], this.__context())\n              )\n              if(err !== undefined) return err\n            }else{\n              this.state.quoting = false\n              this.state.wasQuoting = true\n              // continue\n              this.state.field.prepend(quote)\n            }\n          }else{\n            if(this.state.field.length !== 0){\n              // In relax mode, treat opening quote preceded by chrs as regular\n              if( relax === false ){\n                const err = this.__error(\n                  new CsvError('INVALID_OPENING_QUOTE', [\n                    'Invalid Opening Quote:',\n                    `a quote is found inside a field at line ${this.info.lines}`,\n                  ], this.__context(), {\n                    field: this.state.field,\n                  })\n                )\n                if(err !== undefined) return err\n              }\n            }else{\n              this.state.quoting = true\n              continue\n            }\n          }\n        }\n        if(this.state.quoting === false){\n          let recordDelimiterLength = this.__isRecordDelimiter(chr, buf, pos)\n          if(recordDelimiterLength !== 0){\n            // Do not emit comments which take a full line\n            const skipCommentLine = this.state.commenting && (this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0)\n            if(skipCommentLine){\n              this.info.comment_lines++\n              // Skip full comment line\n            }else{\n              // Skip if line is empty and skip_empty_lines activated\n              if(skip_empty_lines === true && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0){\n                this.info.empty_lines++\n                pos += recordDelimiterLength - 1\n                continue\n              }\n              // Activate records emition if above from_line\n              if(this.state.enabled === false && this.info.lines + (this.state.wasRowDelimiter === true ? 1: 0 ) >= from_line){\n                this.state.enabled = true\n                this.__resetField()\n                this.__resetRow()\n                pos += recordDelimiterLength - 1\n                continue\n              }else{\n                const errField = this.__onField()\n                if(errField !== undefined) return errField\n                const errRecord = this.__onRow()\n                if(errRecord !== undefined) return errRecord\n              }\n              if(to !== -1 && this.info.records >= to){\n                this.state.stop = true\n                this.push(null)\n                return\n              }\n            }\n            this.state.commenting = false\n            pos += recordDelimiterLength - 1\n            continue\n          }\n          if(this.state.commenting){\n            continue\n          }\n          const commentCount = comment === null ? 0 : this.__compareBytes(comment, buf, pos, chr)\n          if(commentCount !== 0){\n            this.state.commenting = true\n            continue\n          }\n          let delimiterLength = this.__isDelimiter(chr, buf, pos)\n          if(delimiterLength !== 0){\n            const errField = this.__onField()\n            if(errField !== undefined) return errField\n            pos += delimiterLength - 1\n            continue\n          }\n        }\n      }\n      if(this.state.commenting === false){\n        if(max_record_size !== 0 && this.state.record_length + this.state.field.length > max_record_size){\n          const err = this.__error(\n            new CsvError('CSV_MAX_RECORD_SIZE', [\n              'Max Record Size:',\n              'record exceed the maximum number of tolerated bytes',\n              `of ${max_record_size}`,\n              `at line ${this.info.lines}`,\n            ], this.__context())\n          )\n          if(err !== undefined) return err\n        }\n      }\n\n      const lappend = ltrim === false || this.state.quoting === true || this.state.field.length !== 0 || !this.__isCharTrimable(chr)\n      // rtrim in non quoting is handle in __onField\n      const rappend = rtrim === false || this.state.wasQuoting === false\n      if( lappend === true && rappend === true ){\n        this.state.field.append(chr)\n      }else if(rtrim === true && !this.__isCharTrimable(chr)){\n        const err = this.__error(\n          new CsvError('CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE', [\n            'Invalid Closing Quote:',\n            'found non trimable byte after quote',\n            `at line ${this.info.lines}`,\n          ], this.__context())\n        )\n        if(err !== undefined) return err\n      }\n    }\n    if(end === true){\n      // Ensure we are not ending in a quoting state\n      if(this.state.quoting === true){\n        const err = this.__error(\n          new CsvError('CSV_QUOTE_NOT_CLOSED', [\n            'Quote Not Closed:',\n            `the parsing is finished with an opening quote at line ${this.info.lines}`,\n          ], this.__context())\n        )\n        if(err !== undefined) return err\n      }else{\n        // Skip last line if it has no characters\n        if(this.state.wasQuoting === true || this.state.record.length !== 0 || this.state.field.length !== 0){\n          const errField = this.__onField()\n          if(errField !== undefined) return errField\n          const errRecord = this.__onRow()\n          if(errRecord !== undefined) return errRecord\n        }else if(this.state.wasRowDelimiter === true){\n          this.info.empty_lines++\n        }else if(this.state.commenting === true){\n          this.info.comment_lines++\n        }\n      }\n    }else{\n      this.state.previousBuf = buf.slice(pos)\n    }\n    if(this.state.wasRowDelimiter === true){\n      this.info.lines++\n      this.state.wasRowDelimiter = false\n    }\n  }\n  // Helper to test if a character is a space or a line delimiter\n  __isCharTrimable(chr){\n    return chr === space || chr === tab || chr === cr || chr === nl\n  }\n  __onRow(){\n    const {columns, info, from, relax_column_count, relax_column_count_less, relax_column_count_more, raw, skip_lines_with_empty_values} = this.options\n    const {enabled, record} = this.state\n    if(enabled === false){\n      return this.__resetRow()\n    }\n    // Convert the first line into column names\n    const recordLength = record.length\n    if(columns === true){\n      if(isRecordEmpty(record)){\n        this.__resetRow()\n        return\n      }\n      return this.__firstLineToColumns(record)\n    }\n    if(columns === false && this.info.records === 0){\n      this.state.expectedRecordLength = recordLength\n    }\n    if(recordLength !== this.state.expectedRecordLength){\n      if(relax_column_count === true || \n        (relax_column_count_less === true && recordLength < this.state.expectedRecordLength) ||\n        (relax_column_count_more === true && recordLength > this.state.expectedRecordLength) ){\n        this.info.invalid_field_length++\n      }else{\n        if(columns === false){\n          const err = this.__error(\n            new CsvError('CSV_INCONSISTENT_RECORD_LENGTH', [\n              'Invalid Record Length:',\n              `expect ${this.state.expectedRecordLength},`,\n              `got ${recordLength} on line ${this.info.lines}`,\n            ], this.__context(), {\n              record: record,\n            })\n          )\n          if(err !== undefined) return err\n        }else{\n          const err = this.__error(\n            // CSV_INVALID_RECORD_LENGTH_DONT_MATCH_COLUMNS\n            new CsvError('CSV_RECORD_DONT_MATCH_COLUMNS_LENGTH', [\n              'Invalid Record Length:',\n              `columns length is ${columns.length},`, // rename columns\n              `got ${recordLength} on line ${this.info.lines}`,\n            ], this.__context(), {\n              record: record,\n            })\n          )\n          if(err !== undefined) return err\n        }\n      }\n    }\n    if(skip_lines_with_empty_values === true){\n      if(isRecordEmpty(record)){\n        this.__resetRow()\n        return\n      }\n    }\n    if(this.state.recordHasError === true){\n      this.__resetRow()\n      this.state.recordHasError = false\n      return\n    }\n    this.info.records++\n    if(from === 1 || this.info.records >= from){\n      if(columns !== false){\n        const obj = {}\n        // Transform record array to an object\n        for(let i in record){\n          if(columns[i] === undefined || columns[i].disabled) continue\n          obj[columns[i].name] = record[i]\n        }\n        const {objname} = this.options\n        if(objname === undefined){\n          if(raw === true || info === true){\n            this.__push(Object.assign(\n              {record: obj},\n              (raw === true ? {raw: this.state.rawBuffer.toString()}: {}),\n              (info === true ? {info: this.state.info}: {})\n            ))\n          }else{\n            this.__push(obj)\n          }\n        }else{\n          if(raw === true || info === true){\n            this.__push(Object.assign(\n              {record: [obj[objname], obj]},\n              raw === true ? {raw: this.state.rawBuffer.toString()}: {},\n              info === true ? {info: this.state.info}: {}\n            ))\n          }else{\n            this.__push([obj[objname], obj])\n          }\n        }\n      }else{\n        if(raw === true || info === true){\n          this.__push(Object.assign(\n            {record: record},\n            raw === true ? {raw: this.state.rawBuffer.toString()}: {},\n            info === true ? {info: this.state.info}: {}\n          ))\n        }else{\n          this.__push(record)\n        }\n      }\n    }\n    this.__resetRow()\n  }\n  __firstLineToColumns(record){\n    const {firstLineToHeaders} = this.state\n    try{\n      const headers = firstLineToHeaders === undefined ? record : firstLineToHeaders.call(null, record)\n      if(!Array.isArray(headers)){\n        return this.__error(\n          new CsvError('CSV_INVALID_COLUMN_MAPPING', [\n            'Invalid Column Mapping:',\n            'expect an array from column function,',\n            `got ${JSON.stringify(headers)}`\n          ], this.__context(), {\n            headers: headers,\n          })\n        )\n      }\n      const normalizedHeaders = normalizeColumnsArray(headers)\n      this.state.expectedRecordLength = normalizedHeaders.length\n      this.options.columns = normalizedHeaders\n      this.__resetRow()\n      return\n    }catch(err){\n      return err\n    }\n  }\n  __resetRow(){\n    if(this.options.raw === true){\n      this.state.rawBuffer.reset()\n    }\n    this.state.record = []\n    this.state.record_length = 0\n  }\n  __onField(){\n    const {cast, rtrim, max_record_size} = this.options\n    const {enabled, wasQuoting} = this.state\n    // Short circuit for the from_line options\n    if(enabled === false){ /* this.options.columns !== true && */\n      return this.__resetField()\n    }\n    let field = this.state.field.toString()\n    if(rtrim === true && wasQuoting === false){\n      field = field.trimRight()\n    }\n    if(cast === true){\n      const [err, f] = this.__cast(field)\n      if(err !== undefined) return err\n      field = f\n    }\n    this.state.record.push(field)\n    // Increment record length if record size must not exceed a limit\n    if(max_record_size !== 0 && typeof field === 'string'){\n      this.state.record_length += field.length\n    }\n    this.__resetField()\n  }\n  __resetField(){\n    this.state.field.reset()\n    this.state.wasQuoting = false\n  }\n  __push(record){\n    const {on_record} = this.options\n    if(on_record !== undefined){\n      const context = this.__context()\n      record = on_record.call(null, record, context)\n      if(record === undefined || record === null){ return }\n    }\n    this.push(record)\n  }\n  // Return a tuple with the error and the casted value\n  __cast(field){\n    const {columns, relax_column_count} = this.options\n    const isColumns = Array.isArray(columns)\n    // Dont loose time calling cast\n    // because the final record is an object\n    // and this field can't be associated to a key present in columns\n    if( isColumns === true && relax_column_count && this.options.columns.length <= this.state.record.length ){\n      return [undefined, undefined]\n    }\n    const context = this.__context()\n    if(this.state.castField !== null){\n      try{\n        return [undefined, this.state.castField.call(null, field, context)]\n      }catch(err){\n        return [err]\n      }\n    }\n    if(this.__isFloat(field)){\n      return [undefined, parseFloat(field)]\n    }else if(this.options.cast_date !== false){\n      return [undefined, this.options.cast_date.call(null, field, context)]\n    }\n    return [undefined, field]\n  }\n  // Keep it in case we implement the `cast_int` option\n  // __isInt(value){\n  //   // return Number.isInteger(parseInt(value))\n  //   // return !isNaN( parseInt( obj ) );\n  //   return /^(\\-|\\+)?[1-9][0-9]*$/.test(value)\n  // }\n  __isFloat(value){\n    return (value - parseFloat( value ) + 1) >= 0 // Borrowed from jquery\n  }\n  __compareBytes(sourceBuf, targetBuf, pos, firtByte){\n    if(sourceBuf[0] !== firtByte) return 0\n    const sourceLength = sourceBuf.length\n    for(let i = 1; i < sourceLength; i++){\n      if(sourceBuf[i] !== targetBuf[pos+i]) return 0\n    }\n    return sourceLength\n  }\n  __needMoreData(i, bufLen, end){\n    if(end){\n      return false\n    }\n    const {comment, delimiter} = this.options\n    const {quoting, recordDelimiterMaxLength} = this.state\n    const numOfCharLeft = bufLen - i - 1\n    const requiredLength = Math.max(\n      // Skip if the remaining buffer smaller than comment\n      comment ? comment.length : 0,\n      // Skip if the remaining buffer smaller than row delimiter\n      recordDelimiterMaxLength,\n      // Skip if the remaining buffer can be row delimiter following the closing quote\n      // 1 is for quote.length\n      quoting ? (1 + recordDelimiterMaxLength) : 0,\n      // Skip if the remaining buffer can be delimiter\n      delimiter.length,\n      // Skip if the remaining buffer can be escape sequence\n      // 1 is for escape.length\n      1\n    )\n    return numOfCharLeft < requiredLength\n  }\n  __isDelimiter(chr, buf, pos){\n    const {delimiter} = this.options\n    const delLength = delimiter.length\n    if(delimiter[0] !== chr) return 0\n    for(let i = 1; i < delLength; i++){\n      if(delimiter[i] !== buf[pos+i]) return 0\n    }\n    return delimiter.length\n  }\n  __isRecordDelimiter(chr, buf, pos){\n    const {record_delimiter} = this.options\n    const recordDelimiterLength = record_delimiter.length\n    loop1: for(let i = 0; i < recordDelimiterLength; i++){\n      const rd = record_delimiter[i]\n      const rdLength = rd.length\n      if(rd[0] !== chr){\n        continue\n      }\n      for(let j = 1; j < rdLength; j++){\n        if(rd[j] !== buf[pos+j]){\n          continue loop1\n        }\n      }\n      return rd.length\n    }\n    return 0\n  }\n  __autoDiscoverRowDelimiter(buf, pos){\n    const chr = buf[pos]\n    if(chr === cr){\n      if(buf[pos+1] === nl){\n        this.options.record_delimiter.push(Buffer.from('\\r\\n'))\n        this.state.recordDelimiterMaxLength = 2\n        return 2\n      }else{\n        this.options.record_delimiter.push(Buffer.from('\\r'))\n        this.state.recordDelimiterMaxLength = 1\n        return 1\n      }\n    }else if(chr === nl){\n      this.options.record_delimiter.push(Buffer.from('\\n'))\n      this.state.recordDelimiterMaxLength = 1\n      return 1\n    }\n    return 0\n  }\n  __error(msg){\n    const {skip_lines_with_error} = this.options\n    const err = typeof msg === 'string' ? new Error(msg) : msg\n    if(skip_lines_with_error){\n      this.state.recordHasError = true\n      this.emit('skip', err)\n      return undefined\n    }else{\n      return err\n    }\n  }\n  __context(){\n    const {columns} = this.options\n    const isColumns = Array.isArray(columns)\n    return {\n      column: isColumns === true ?\n        ( columns.length > this.state.record.length ?\n          columns[this.state.record.length].name :\n          null\n        ) :\n        this.state.record.length,\n      empty_lines: this.info.empty_lines,\n      header: columns === true,\n      index: this.state.record.length,\n      invalid_field_length: this.info.invalid_field_length,\n      quoting: this.state.wasQuoting,\n      lines: this.info.lines,\n      records: this.info.records\n    }\n  }\n}\n\nconst parse = function(){\n  let data, options, callback\n  for(let i in arguments){\n    const argument = arguments[i]\n    const type = typeof argument\n    if(data === undefined && (typeof argument === 'string' || Buffer.isBuffer(argument))){\n      data = argument\n    }else if(options === undefined && isObject(argument)){\n      options = argument\n    }else if(callback === undefined && type === 'function'){\n      callback = argument\n    }else{\n      throw new CsvError('CSV_INVALID_ARGUMENT', [\n        'Invalid argument:',\n        `got ${JSON.stringify(argument)} at index ${i}`\n      ])\n    }\n  }\n  const parser = new Parser(options)\n  if(callback){\n    const records = options === undefined || options.objname === undefined ? [] : {}\n    parser.on('readable', function(){\n      let record\n      while((record = this.read()) !== null){\n        if(options === undefined || options.objname === undefined){\n          records.push(record)\n        }else{\n          records[record[0]] = record[1]\n        }\n      }\n    })\n    parser.on('error', function(err){\n      callback(err, undefined, parser.info)\n    })\n    parser.on('end', function(){\n      callback(undefined, records, parser.info)\n    })\n  }\n  if(data !== undefined){\n    parser.write(data)\n    parser.end()\n  }\n  return parser\n}\n\nclass CsvError extends Error {\n  constructor(code, message, ...contexts) {\n    if(Array.isArray(message)) message = message.join(' ')\n    super(message)\n    if(Error.captureStackTrace !== undefined){\n      Error.captureStackTrace(this, CsvError)\n    }\n    this.code = code\n    for(const context of contexts){\n      for(const key in context){\n        const value = context[key]\n        this[key] = Buffer.isBuffer(value) ? value.toString() : value == null ? value : JSON.parse(JSON.stringify(value))\n      }\n    }\n  }\n}\n\nparse.Parser = Parser\n\nparse.CsvError = CsvError\n\nmodule.exports = parse\n\nconst underscore = function(str){\n  return str.replace(/([A-Z])/g, function(_, match){\n    return '_' + match.toLowerCase()\n  })\n}\n\nconst isObject = function(obj){\n  return (typeof obj === 'object' && obj !== null && !Array.isArray(obj))\n}\n\nconst isRecordEmpty = function(record){\n  return record.every( (field) => field == null || field.toString && field.toString().trim() === '' )\n}\n\nconst normalizeColumnsArray = function(columns){\n  const normalizedColumns = [];\n\n  for(let i=0; i< columns.length; i++){\n    const column = columns[i]\n    if(column === undefined || column === null || column === false){\n      normalizedColumns[i] = { disabled: true }\n    }else if(typeof column === 'string'){\n      normalizedColumns[i] = { name: column }\n    }else if(isObject(column)){\n      if(typeof column.name !== 'string'){\n        throw new CsvError('CSV_OPTION_COLUMNS_MISSING_NAME', [\n          'Option columns missing name:',\n          `property \"name\" is required at position ${i}`,\n          'when column is an object literal'\n        ])\n      }\n      normalizedColumns[i] = column\n    }else{\n      throw new CsvError('CSV_INVALID_COLUMN_DEFINITION', [\n        'Invalid column definition:',\n        'expect a string or a literal object,',\n        `got ${JSON.stringify(column)} at position ${i}`\n      ])\n    }\n  }\n  return normalizedColumns;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":401,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":402,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":403,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":404,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":405,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":406,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":407,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":408,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":409,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":410,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":411,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":412,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":413,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":414,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":415,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":416,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":417,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":418,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":419,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":420,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":421,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":422,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":423,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":424,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":425,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":426,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":427,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":428,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":429,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":430,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":431,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":432,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":433,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":434,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":435,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":436,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":437,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":438,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":439,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":440,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":441,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":442,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":443,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":444,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":445,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":446,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":447,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":448,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":449,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":450,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":451,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":452,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":453,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":454,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":455,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":456,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":457,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":458,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":459,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":460,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":461,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":462,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":463,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":464,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":465,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":466,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":467,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":468,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":469,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":470,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":471,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":472,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":473,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":474,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":475,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":476,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":477,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":478,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":479,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":480,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":481,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":482,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":483,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":484,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":485,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":486,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":487,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":488,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":489,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":490,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":491,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":492,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":493,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":494,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":495,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":496,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":497,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":498,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":499,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":500,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":501,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":502,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":503,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":504,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":505,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":506,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":507,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":508,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":509,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":510,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":511,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":512,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":513,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":514,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":515,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":516,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":517,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":518,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":519,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":520,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":521,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":522,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":523,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":524,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":525,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":526,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":527,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":528,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":529,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":530,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":531,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":532,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":533,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":534,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":535,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":536,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":537,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":538,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":539,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":540,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":541,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":542,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":543,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":544,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":545,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":546,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":547,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":548,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":549,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":550,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":551,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":552,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":553,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":554,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":555,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":556,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":557,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":558,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":559,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":560,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":561,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":562,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":563,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":564,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":565,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":566,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":567,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":568,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":569,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":570,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":571,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":572,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":573,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":574,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":575,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":576,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":577,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":578,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":579,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":580,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":581,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":582,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":583,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":584,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":585,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":586,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":587,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":588,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":589,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":590,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":591,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":592,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":593,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":594,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":595,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":596,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":597,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":598,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":599,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":600,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":601,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":602,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":603,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":604,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":605,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":606,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":607,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":608,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":609,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":610,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":611,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":612,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":613,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":614,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":615,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":616,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":617,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":618,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":619,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":620,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":621,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":622,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":623,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":624,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":625,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":626,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":627,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":628,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":629,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":630,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":631,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":632,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":633,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":634,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":635,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":636,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":637,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":638,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":639,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":640,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":641,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":642,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":643,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":644,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":645,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":646,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":647,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":648,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":649,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":650,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":651,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":652,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":653,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":654,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":655,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":656,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":657,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":658,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":659,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":660,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":661,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":662,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":663,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":664,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":665,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":666,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":667,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":668,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":669,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":670,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":671,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":672,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":673,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":674,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":675,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":676,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":677,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":678,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":679,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":680,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":681,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":682,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":683,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":684,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":685,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":686,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":687,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":688,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":689,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":690,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":691,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":692,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":693,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":694,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":695,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":696,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":697,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":698,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":699,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":700,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":701,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":702,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":703,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":704,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":705,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":706,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":707,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":708,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":709,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":710,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":711,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":712,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":713,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":714,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":715,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":716,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":717,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":718,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":719,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":720,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":721,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":722,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":723,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":724,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":725,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":726,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":727,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":728,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":729,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":730,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":731,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":732,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":733,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":734,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":735,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":736,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":737,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":738,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":739,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":740,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":741,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":742,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":743,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":744,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":745,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":746,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":747,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":748,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":749,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":750,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":751,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":752,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":753,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":754,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":755,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":756,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":757,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":758,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":759,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":760,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":761,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":762,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":763,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":764,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":765,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":766,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":767,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":768,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":769,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":770,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":771,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":772,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":773,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":774,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":775,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":776,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":777,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":778,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":779,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":780,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":781,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":782,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":783,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":784,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":785,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":786,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":787,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":788,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":789,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":790,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":791,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":792,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":793,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":794,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":795,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":796,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":797,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":798,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":799,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":800,"column":0},"generated":{"line":801,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":801,"column":0},"generated":{"line":802,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":802,"column":0},"generated":{"line":803,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":803,"column":0},"generated":{"line":804,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":804,"column":0},"generated":{"line":805,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":805,"column":0},"generated":{"line":806,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":806,"column":0},"generated":{"line":807,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":807,"column":0},"generated":{"line":808,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":808,"column":0},"generated":{"line":809,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":809,"column":0},"generated":{"line":810,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":810,"column":0},"generated":{"line":811,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":811,"column":0},"generated":{"line":812,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":812,"column":0},"generated":{"line":813,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":813,"column":0},"generated":{"line":814,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":814,"column":0},"generated":{"line":815,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":815,"column":0},"generated":{"line":816,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":816,"column":0},"generated":{"line":817,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":817,"column":0},"generated":{"line":818,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":818,"column":0},"generated":{"line":819,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":819,"column":0},"generated":{"line":820,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":820,"column":0},"generated":{"line":821,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":821,"column":0},"generated":{"line":822,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":822,"column":0},"generated":{"line":823,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":823,"column":0},"generated":{"line":824,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":824,"column":0},"generated":{"line":825,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":825,"column":0},"generated":{"line":826,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":826,"column":0},"generated":{"line":827,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":827,"column":0},"generated":{"line":828,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":828,"column":0},"generated":{"line":829,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":829,"column":0},"generated":{"line":830,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":830,"column":0},"generated":{"line":831,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":831,"column":0},"generated":{"line":832,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":832,"column":0},"generated":{"line":833,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":833,"column":0},"generated":{"line":834,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":834,"column":0},"generated":{"line":835,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":835,"column":0},"generated":{"line":836,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":836,"column":0},"generated":{"line":837,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":837,"column":0},"generated":{"line":838,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":838,"column":0},"generated":{"line":839,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":839,"column":0},"generated":{"line":840,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":840,"column":0},"generated":{"line":841,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":841,"column":0},"generated":{"line":842,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":842,"column":0},"generated":{"line":843,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":843,"column":0},"generated":{"line":844,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":844,"column":0},"generated":{"line":845,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":845,"column":0},"generated":{"line":846,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":846,"column":0},"generated":{"line":847,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":847,"column":0},"generated":{"line":848,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":848,"column":0},"generated":{"line":849,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":849,"column":0},"generated":{"line":850,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":850,"column":0},"generated":{"line":851,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":851,"column":0},"generated":{"line":852,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":852,"column":0},"generated":{"line":853,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":853,"column":0},"generated":{"line":854,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":854,"column":0},"generated":{"line":855,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":855,"column":0},"generated":{"line":856,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":856,"column":0},"generated":{"line":857,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":857,"column":0},"generated":{"line":858,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":858,"column":0},"generated":{"line":859,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":859,"column":0},"generated":{"line":860,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":860,"column":0},"generated":{"line":861,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":861,"column":0},"generated":{"line":862,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":862,"column":0},"generated":{"line":863,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":863,"column":0},"generated":{"line":864,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":864,"column":0},"generated":{"line":865,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":865,"column":0},"generated":{"line":866,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":866,"column":0},"generated":{"line":867,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":867,"column":0},"generated":{"line":868,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":868,"column":0},"generated":{"line":869,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":869,"column":0},"generated":{"line":870,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":870,"column":0},"generated":{"line":871,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":871,"column":0},"generated":{"line":872,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":872,"column":0},"generated":{"line":873,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":873,"column":0},"generated":{"line":874,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":874,"column":0},"generated":{"line":875,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":875,"column":0},"generated":{"line":876,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":876,"column":0},"generated":{"line":877,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":877,"column":0},"generated":{"line":878,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":878,"column":0},"generated":{"line":879,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":879,"column":0},"generated":{"line":880,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":880,"column":0},"generated":{"line":881,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":881,"column":0},"generated":{"line":882,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":882,"column":0},"generated":{"line":883,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":883,"column":0},"generated":{"line":884,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":884,"column":0},"generated":{"line":885,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":885,"column":0},"generated":{"line":886,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":886,"column":0},"generated":{"line":887,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":887,"column":0},"generated":{"line":888,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":888,"column":0},"generated":{"line":889,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":889,"column":0},"generated":{"line":890,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":890,"column":0},"generated":{"line":891,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":891,"column":0},"generated":{"line":892,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":892,"column":0},"generated":{"line":893,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":893,"column":0},"generated":{"line":894,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":894,"column":0},"generated":{"line":895,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":895,"column":0},"generated":{"line":896,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":896,"column":0},"generated":{"line":897,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":897,"column":0},"generated":{"line":898,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":898,"column":0},"generated":{"line":899,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":899,"column":0},"generated":{"line":900,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":900,"column":0},"generated":{"line":901,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":901,"column":0},"generated":{"line":902,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":902,"column":0},"generated":{"line":903,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":903,"column":0},"generated":{"line":904,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":904,"column":0},"generated":{"line":905,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":905,"column":0},"generated":{"line":906,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":906,"column":0},"generated":{"line":907,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":907,"column":0},"generated":{"line":908,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":908,"column":0},"generated":{"line":909,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":909,"column":0},"generated":{"line":910,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":910,"column":0},"generated":{"line":911,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":911,"column":0},"generated":{"line":912,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":912,"column":0},"generated":{"line":913,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":913,"column":0},"generated":{"line":914,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":914,"column":0},"generated":{"line":915,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":915,"column":0},"generated":{"line":916,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":916,"column":0},"generated":{"line":917,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":917,"column":0},"generated":{"line":918,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":918,"column":0},"generated":{"line":919,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":919,"column":0},"generated":{"line":920,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":920,"column":0},"generated":{"line":921,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":921,"column":0},"generated":{"line":922,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":922,"column":0},"generated":{"line":923,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":923,"column":0},"generated":{"line":924,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":924,"column":0},"generated":{"line":925,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":925,"column":0},"generated":{"line":926,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":926,"column":0},"generated":{"line":927,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":927,"column":0},"generated":{"line":928,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":928,"column":0},"generated":{"line":929,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":929,"column":0},"generated":{"line":930,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":930,"column":0},"generated":{"line":931,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":931,"column":0},"generated":{"line":932,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":932,"column":0},"generated":{"line":933,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":933,"column":0},"generated":{"line":934,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":934,"column":0},"generated":{"line":935,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":935,"column":0},"generated":{"line":936,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":936,"column":0},"generated":{"line":937,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":937,"column":0},"generated":{"line":938,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":938,"column":0},"generated":{"line":939,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":939,"column":0},"generated":{"line":940,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":940,"column":0},"generated":{"line":941,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":941,"column":0},"generated":{"line":942,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":942,"column":0},"generated":{"line":943,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":943,"column":0},"generated":{"line":944,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":944,"column":0},"generated":{"line":945,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":945,"column":0},"generated":{"line":946,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":946,"column":0},"generated":{"line":947,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":947,"column":0},"generated":{"line":948,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":948,"column":0},"generated":{"line":949,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":949,"column":0},"generated":{"line":950,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":950,"column":0},"generated":{"line":951,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":951,"column":0},"generated":{"line":952,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":952,"column":0},"generated":{"line":953,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":953,"column":0},"generated":{"line":954,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":954,"column":0},"generated":{"line":955,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":955,"column":0},"generated":{"line":956,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":956,"column":0},"generated":{"line":957,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":957,"column":0},"generated":{"line":958,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":958,"column":0},"generated":{"line":959,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":959,"column":0},"generated":{"line":960,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":960,"column":0},"generated":{"line":961,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":961,"column":0},"generated":{"line":962,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":962,"column":0},"generated":{"line":963,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":963,"column":0},"generated":{"line":964,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":964,"column":0},"generated":{"line":965,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":965,"column":0},"generated":{"line":966,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":966,"column":0},"generated":{"line":967,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":967,"column":0},"generated":{"line":968,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":968,"column":0},"generated":{"line":969,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":969,"column":0},"generated":{"line":970,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":970,"column":0},"generated":{"line":971,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":971,"column":0},"generated":{"line":972,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":972,"column":0},"generated":{"line":973,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":973,"column":0},"generated":{"line":974,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":974,"column":0},"generated":{"line":975,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":975,"column":0},"generated":{"line":976,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":976,"column":0},"generated":{"line":977,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":977,"column":0},"generated":{"line":978,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":978,"column":0},"generated":{"line":979,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":979,"column":0},"generated":{"line":980,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":980,"column":0},"generated":{"line":981,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":981,"column":0},"generated":{"line":982,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":982,"column":0},"generated":{"line":983,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":983,"column":0},"generated":{"line":984,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":984,"column":0},"generated":{"line":985,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":985,"column":0},"generated":{"line":986,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":986,"column":0},"generated":{"line":987,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":987,"column":0},"generated":{"line":988,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":988,"column":0},"generated":{"line":989,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":989,"column":0},"generated":{"line":990,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":990,"column":0},"generated":{"line":991,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":991,"column":0},"generated":{"line":992,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":992,"column":0},"generated":{"line":993,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":993,"column":0},"generated":{"line":994,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":994,"column":0},"generated":{"line":995,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":995,"column":0},"generated":{"line":996,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":996,"column":0},"generated":{"line":997,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":997,"column":0},"generated":{"line":998,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":998,"column":0},"generated":{"line":999,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":999,"column":0},"generated":{"line":1000,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1000,"column":0},"generated":{"line":1001,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1001,"column":0},"generated":{"line":1002,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1002,"column":0},"generated":{"line":1003,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1003,"column":0},"generated":{"line":1004,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1004,"column":0},"generated":{"line":1005,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1005,"column":0},"generated":{"line":1006,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1006,"column":0},"generated":{"line":1007,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1007,"column":0},"generated":{"line":1008,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1008,"column":0},"generated":{"line":1009,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1009,"column":0},"generated":{"line":1010,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1010,"column":0},"generated":{"line":1011,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1011,"column":0},"generated":{"line":1012,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1012,"column":0},"generated":{"line":1013,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1013,"column":0},"generated":{"line":1014,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1014,"column":0},"generated":{"line":1015,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1015,"column":0},"generated":{"line":1016,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1016,"column":0},"generated":{"line":1017,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1017,"column":0},"generated":{"line":1018,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1018,"column":0},"generated":{"line":1019,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1019,"column":0},"generated":{"line":1020,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1020,"column":0},"generated":{"line":1021,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1021,"column":0},"generated":{"line":1022,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1022,"column":0},"generated":{"line":1023,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1023,"column":0},"generated":{"line":1024,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1024,"column":0},"generated":{"line":1025,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1025,"column":0},"generated":{"line":1026,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1026,"column":0},"generated":{"line":1027,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1027,"column":0},"generated":{"line":1028,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1028,"column":0},"generated":{"line":1029,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1029,"column":0},"generated":{"line":1030,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1030,"column":0},"generated":{"line":1031,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1031,"column":0},"generated":{"line":1032,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1032,"column":0},"generated":{"line":1033,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1033,"column":0},"generated":{"line":1034,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1034,"column":0},"generated":{"line":1035,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1035,"column":0},"generated":{"line":1036,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1036,"column":0},"generated":{"line":1037,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1037,"column":0},"generated":{"line":1038,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1038,"column":0},"generated":{"line":1039,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1039,"column":0},"generated":{"line":1040,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1040,"column":0},"generated":{"line":1041,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1041,"column":0},"generated":{"line":1042,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1042,"column":0},"generated":{"line":1043,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1043,"column":0},"generated":{"line":1044,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1044,"column":0},"generated":{"line":1045,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1045,"column":0},"generated":{"line":1046,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1046,"column":0},"generated":{"line":1047,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1047,"column":0},"generated":{"line":1048,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1048,"column":0},"generated":{"line":1049,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1049,"column":0},"generated":{"line":1050,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1050,"column":0},"generated":{"line":1051,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1051,"column":0},"generated":{"line":1052,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1052,"column":0},"generated":{"line":1053,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1053,"column":0},"generated":{"line":1054,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1054,"column":0},"generated":{"line":1055,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1055,"column":0},"generated":{"line":1056,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1056,"column":0},"generated":{"line":1057,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1057,"column":0},"generated":{"line":1058,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1058,"column":0},"generated":{"line":1059,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1059,"column":0},"generated":{"line":1060,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1060,"column":0},"generated":{"line":1061,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1061,"column":0},"generated":{"line":1062,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1062,"column":0},"generated":{"line":1063,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1063,"column":0},"generated":{"line":1064,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1064,"column":0},"generated":{"line":1065,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1065,"column":0},"generated":{"line":1066,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1066,"column":0},"generated":{"line":1067,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1067,"column":0},"generated":{"line":1068,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1068,"column":0},"generated":{"line":1069,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1069,"column":0},"generated":{"line":1070,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1070,"column":0},"generated":{"line":1071,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1071,"column":0},"generated":{"line":1072,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1072,"column":0},"generated":{"line":1073,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1073,"column":0},"generated":{"line":1074,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1074,"column":0},"generated":{"line":1075,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1075,"column":0},"generated":{"line":1076,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1076,"column":0},"generated":{"line":1077,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1077,"column":0},"generated":{"line":1078,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1078,"column":0},"generated":{"line":1079,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1079,"column":0},"generated":{"line":1080,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1080,"column":0},"generated":{"line":1081,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1081,"column":0},"generated":{"line":1082,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1082,"column":0},"generated":{"line":1083,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1083,"column":0},"generated":{"line":1084,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1084,"column":0},"generated":{"line":1085,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1085,"column":0},"generated":{"line":1086,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1086,"column":0},"generated":{"line":1087,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1087,"column":0},"generated":{"line":1088,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1088,"column":0},"generated":{"line":1089,"column":0}},{"source":"node_modules/csv-parse/lib/index.js","original":{"line":1089,"column":0},"generated":{"line":1090,"column":0}}],"sources":{"node_modules/csv-parse/lib/index.js":"\n/*\nCSV Parse\n\nPlease look at the [project documentation](https://csv.js.org/parse/) for additional\ninformation.\n*/\n\nconst { Transform } = require('stream')\nconst ResizeableBuffer = require('./ResizeableBuffer')\n\nconst cr = 13\nconst nl = 10\nconst space = 32\nconst tab = 9\nconst bom_utf8 = Buffer.from([239, 187, 191])\n\nclass Parser extends Transform {\n  constructor(opts = {}){\n    super({...{readableObjectMode: true}, ...opts})\n    const options = {}\n    // Merge with user options\n    for(let opt in opts){\n      options[underscore(opt)] = opts[opt]\n    }\n    // Normalize option `bom`\n    if(options.bom === undefined || options.bom === null || options.bom === false){\n      options.bom = false\n    }else if(options.bom !== true){\n      throw new CsvError('CSV_INVALID_OPTION_BOM', [\n        'Invalid option bom:', 'bom must be true,',\n        `got ${JSON.stringify(options.bom)}`\n      ])\n    }\n    // Normalize option `cast`\n    let fnCastField = null\n    if(options.cast === undefined || options.cast === null || options.cast === false || options.cast === ''){\n      options.cast = undefined\n    }else if(typeof options.cast === 'function'){\n      fnCastField = options.cast\n      options.cast = true\n    }else if(options.cast !== true){\n      throw new CsvError('CSV_INVALID_OPTION_CAST', [\n        'Invalid option cast:', 'cast must be true or a function,',\n        `got ${JSON.stringify(options.cast)}`\n      ])\n    }\n    // Normalize option `cast_date`\n    if(options.cast_date === undefined || options.cast_date === null || options.cast_date === false || options.cast_date === ''){\n      options.cast_date = false\n    }else if(options.cast_date === true){\n      options.cast_date = function(value){\n        const date = Date.parse(value)\n        return !isNaN(date) ? new Date(date) : value\n      }\n    }else if(typeof options.cast_date !== 'function'){\n      throw new CsvError('CSV_INVALID_OPTION_CAST_DATE', [\n        'Invalid option cast_date:', 'cast_date must be true or a function,',\n        `got ${JSON.stringify(options.cast_date)}`\n      ])\n    }\n    // Normalize option `columns`\n    let fnFirstLineToHeaders = null\n    if(options.columns === true){\n      // Fields in the first line are converted as-is to columns\n      fnFirstLineToHeaders = undefined\n    }else if(typeof options.columns === 'function'){\n      fnFirstLineToHeaders = options.columns\n      options.columns = true\n    }else if(Array.isArray(options.columns)){\n      options.columns = normalizeColumnsArray(options.columns)\n    }else if(options.columns === undefined || options.columns === null || options.columns === false){\n      options.columns = false\n    }else{\n      throw new CsvError('CSV_INVALID_OPTION_COLUMNS', [\n        'Invalid option columns:',\n        'expect an object, a function or true,',\n        `got ${JSON.stringify(options.columns)}`\n      ])\n    }\n    // Normalize option `comment`\n    if(options.comment === undefined || options.comment === null || options.comment === false || options.comment === ''){\n      options.comment = null\n    }else{\n      if(typeof options.comment === 'string'){\n        options.comment = Buffer.from(options.comment)\n      }\n      if(!Buffer.isBuffer(options.comment)){\n        throw new CsvError('CSV_INVALID_OPTION_COMMENT', [\n          'Invalid option comment:',\n          'comment must be a buffer or a string,',\n          `got ${JSON.stringify(options.comment)}`\n        ])\n      }\n    }\n    // Normalize option `delimiter`\n    if(options.delimiter === undefined || options.delimiter === null || options.delimiter === false){\n      options.delimiter = Buffer.from(',')\n    }else if(typeof options.delimiter === 'string' && options.delimiter.length !== 0){\n      options.delimiter = Buffer.from(options.delimiter)\n    }else if(\n      (Buffer.isBuffer(options.delimiter) && options.delimiter.length === 0) ||\n      (typeof options.delimiter === 'string' && options.delimiter.length === 0) ||\n      (!Buffer.isBuffer(options.delimiter) && typeof options.delimiter !== 'string')\n    ){\n      throw new CsvError('CSV_INVALID_OPTION_DELIMITER', [\n        'Invalid option delimiter:',\n        'delimiter must be a non empty string or buffer,',\n        `got ${JSON.stringify(options.delimiter)}`\n      ])\n    }\n    // Normalize option `escape`\n    if(options.escape === undefined || options.escape === null){\n      options.escape = Buffer.from('\"')\n    }else if(typeof options.escape === 'string'){\n      options.escape = Buffer.from(options.escape)\n    }\n    if(!Buffer.isBuffer(options.escape)){\n      throw new Error(`Invalid Option: escape must be a buffer or a string, got ${JSON.stringify(options.escape)}`)\n    }else if(options.escape.length !== 1){\n      throw new Error(`Invalid Option Length: escape must be one character, got ${options.escape.length}`)\n    }else{\n      options.escape = options.escape[0]\n    }\n    // Normalize option `from`\n    if(options.from === undefined || options.from === null){\n      options.from = 1\n    }else{\n      if(typeof options.from === 'string' && /\\d+/.test(options.from)){\n        options.from = parseInt(options.from)\n      }\n      if(Number.isInteger(options.from)){\n        if(options.from < 0){\n          throw new Error(`Invalid Option: from must be a positive integer, got ${JSON.stringify(opts.from)}`)\n        }\n      }else{\n        throw new Error(`Invalid Option: from must be an integer, got ${JSON.stringify(options.from)}`)\n      }\n    }\n    // Normalize option `from_line`\n    if(options.from_line === undefined || options.from_line === null){\n      options.from_line = 1\n    }else{\n      if(typeof options.from_line === 'string' && /\\d+/.test(options.from_line)){\n        options.from_line = parseInt(options.from_line)\n      }\n      if(Number.isInteger(options.from_line)){\n        if(options.from_line <= 0){\n          throw new Error(`Invalid Option: from_line must be a positive integer greater than 0, got ${JSON.stringify(opts.from_line)}`)\n        }\n      }else{\n        throw new Error(`Invalid Option: from_line must be an integer, got ${JSON.stringify(opts.from_line)}`)\n      }\n    }\n    // Normalize option `info`\n    if(options.info === undefined || options.info === null || options.info === false){\n      options.info = false\n    }else if(options.info !== true){\n      throw new Error(`Invalid Option: info must be true, got ${JSON.stringify(options.info)}`)\n    }\n    // Normalize option `max_record_size`\n    if(options.max_record_size === undefined || options.max_record_size === null || options.max_record_size === false){\n      options.max_record_size = 0\n    }else if(Number.isInteger(options.max_record_size) && options.max_record_size >= 0){\n      // Great, nothing to do\n    }else if(typeof options.max_record_size === 'string' && /\\d+/.test(options.max_record_size)){\n      options.max_record_size = parseInt(options.max_record_size)\n    }else{\n      throw new Error(`Invalid Option: max_record_size must be a positive integer, got ${JSON.stringify(options.max_record_size)}`)\n    }\n    // Normalize option `objname`\n    if(options.objname === undefined || options.objname === null || options.objname === false){\n      options.objname = undefined\n    }else if(Buffer.isBuffer(options.objname)){\n      if(options.objname.length === 0){\n        throw new Error(`Invalid Option: objname must be a non empty buffer`)\n      }\n      options.objname = options.objname.toString()\n    }else if(typeof options.objname === 'string'){\n      if(options.objname.length === 0){\n        throw new Error(`Invalid Option: objname must be a non empty string`)\n      }\n      // Great, nothing to do\n    }else{\n      throw new Error(`Invalid Option: objname must be a string or a buffer, got ${options.objname}`)\n    }\n    // Normalize option `on_record`\n    if(options.on_record === undefined || options.on_record === null){\n      options.on_record = undefined\n    }else if(typeof options.on_record !== 'function'){\n      throw new CsvError('CSV_INVALID_OPTION_ON_RECORD', [\n        'Invalid option `on_record`:',\n        'expect a function,',\n        `got ${JSON.stringify(options.on_record)}`\n      ])\n    }\n    // Normalize option `quote`\n    if(options.quote === null || options.quote === false || options.quote === ''){\n      options.quote = null\n    }else{\n      if(options.quote === undefined || options.quote === true){\n        options.quote = Buffer.from('\"')\n      }else if(typeof options.quote === 'string'){\n        options.quote = Buffer.from(options.quote)\n      }\n      if(!Buffer.isBuffer(options.quote)){\n        throw new Error(`Invalid Option: quote must be a buffer or a string, got ${JSON.stringify(options.quote)}`)\n      }else if(options.quote.length !== 1){\n        throw new Error(`Invalid Option Length: quote must be one character, got ${options.quote.length}`)\n      }else{\n        options.quote = options.quote[0]\n      }\n    }\n    // Normalize option `raw`\n    if(options.raw === undefined || options.raw === null || options.raw === false){\n      options.raw = false\n    }else if(options.raw !== true){\n      throw new Error(`Invalid Option: raw must be true, got ${JSON.stringify(options.raw)}`)\n    }\n    // Normalize option `record_delimiter`\n    if(!options.record_delimiter){\n      options.record_delimiter = []\n    }else if(!Array.isArray(options.record_delimiter)){\n      options.record_delimiter = [options.record_delimiter]\n    }\n    options.record_delimiter = options.record_delimiter.map( function(rd){\n      if(typeof rd === 'string'){\n        rd = Buffer.from(rd)\n      }\n      return rd\n    })\n    // Normalize option `relax`\n    if(typeof options.relax === 'boolean'){\n      // Great, nothing to do\n    }else if(options.relax === undefined || options.relax === null){\n      options.relax = false\n    }else{\n      throw new Error(`Invalid Option: relax must be a boolean, got ${JSON.stringify(options.relax)}`)\n    }\n    // Normalize option `relax_column_count`\n    if(typeof options.relax_column_count === 'boolean'){\n      // Great, nothing to do\n    }else if(options.relax_column_count === undefined || options.relax_column_count === null){\n      options.relax_column_count = false\n    }else{\n      throw new Error(`Invalid Option: relax_column_count must be a boolean, got ${JSON.stringify(options.relax_column_count)}`)\n    }\n    if(typeof options.relax_column_count_less === 'boolean'){\n      // Great, nothing to do\n    }else if(options.relax_column_count_less === undefined || options.relax_column_count_less === null){\n      options.relax_column_count_less = false\n    }else{\n      throw new Error(`Invalid Option: relax_column_count_less must be a boolean, got ${JSON.stringify(options.relax_column_count_less)}`)\n    }\n    if(typeof options.relax_column_count_more === 'boolean'){\n      // Great, nothing to do\n    }else if(options.relax_column_count_more === undefined || options.relax_column_count_more === null){\n      options.relax_column_count_more = false\n    }else{\n      throw new Error(`Invalid Option: relax_column_count_more must be a boolean, got ${JSON.stringify(options.relax_column_count_more)}`)\n    }\n    // Normalize option `skip_empty_lines`\n    if(typeof options.skip_empty_lines === 'boolean'){\n      // Great, nothing to do\n    }else if(options.skip_empty_lines === undefined || options.skip_empty_lines === null){\n      options.skip_empty_lines = false\n    }else{\n      throw new Error(`Invalid Option: skip_empty_lines must be a boolean, got ${JSON.stringify(options.skip_empty_lines)}`)\n    }\n    // Normalize option `skip_lines_with_empty_values`\n    if(typeof options.skip_lines_with_empty_values === 'boolean'){\n      // Great, nothing to do\n    }else if(options.skip_lines_with_empty_values === undefined || options.skip_lines_with_empty_values === null){\n      options.skip_lines_with_empty_values = false\n    }else{\n      throw new Error(`Invalid Option: skip_lines_with_empty_values must be a boolean, got ${JSON.stringify(options.skip_lines_with_empty_values)}`)\n    }\n    // Normalize option `skip_lines_with_error`\n    if(typeof options.skip_lines_with_error === 'boolean'){\n      // Great, nothing to do\n    }else if(options.skip_lines_with_error === undefined || options.skip_lines_with_error === null){\n      options.skip_lines_with_error = false\n    }else{\n      throw new Error(`Invalid Option: skip_lines_with_error must be a boolean, got ${JSON.stringify(options.skip_lines_with_error)}`)\n    }\n    // Normalize option `rtrim`\n    if(options.rtrim === undefined || options.rtrim === null || options.rtrim === false){\n      options.rtrim = false\n    }else if(options.rtrim !== true){\n      throw new Error(`Invalid Option: rtrim must be a boolean, got ${JSON.stringify(options.rtrim)}`)\n    }\n    // Normalize option `ltrim`\n    if(options.ltrim === undefined || options.ltrim === null || options.ltrim === false){\n      options.ltrim = false\n    }else if(options.ltrim !== true){\n      throw new Error(`Invalid Option: ltrim must be a boolean, got ${JSON.stringify(options.ltrim)}`)\n    }\n    // Normalize option `trim`\n    if(options.trim === undefined || options.trim === null || options.trim === false){\n      options.trim = false\n    }else if(options.trim !== true){\n      throw new Error(`Invalid Option: trim must be a boolean, got ${JSON.stringify(options.trim)}`)\n    }\n    // Normalize options `trim`, `ltrim` and `rtrim`\n    if(options.trim === true && opts.ltrim !== false){\n      options.ltrim = true\n    }else if(options.ltrim !== true){\n      options.ltrim = false\n    }\n    if(options.trim === true && opts.rtrim !== false){\n      options.rtrim = true\n    }else if(options.rtrim !== true){\n      options.rtrim = false\n    }\n    // Normalize option `to`\n    if(options.to === undefined || options.to === null){\n      options.to = -1\n    }else{\n      if(typeof options.to === 'string' && /\\d+/.test(options.to)){\n        options.to = parseInt(options.to)\n      }\n      if(Number.isInteger(options.to)){\n        if(options.to <= 0){\n          throw new Error(`Invalid Option: to must be a positive integer greater than 0, got ${JSON.stringify(opts.to)}`)\n        }\n      }else{\n        throw new Error(`Invalid Option: to must be an integer, got ${JSON.stringify(opts.to)}`)\n      }\n    }\n    // Normalize option `to_line`\n    if(options.to_line === undefined || options.to_line === null){\n      options.to_line = -1\n    }else{\n      if(typeof options.to_line === 'string' && /\\d+/.test(options.to_line)){\n        options.to_line = parseInt(options.to_line)\n      }\n      if(Number.isInteger(options.to_line)){\n        if(options.to_line <= 0){\n          throw new Error(`Invalid Option: to_line must be a positive integer greater than 0, got ${JSON.stringify(opts.to_line)}`)\n        }\n      }else{\n        throw new Error(`Invalid Option: to_line must be an integer, got ${JSON.stringify(opts.to_line)}`)\n      }\n    }\n    this.info = {\n      comment_lines: 0,\n      empty_lines: 0,\n      invalid_field_length: 0,\n      lines: 1,\n      records: 0\n    }\n    this.options = options\n    this.state = {\n      bomSkipped: false,\n      castField: fnCastField,\n      commenting: false,\n      enabled: options.from_line === 1,\n      escaping: false,\n      escapeIsQuote: options.escape === options.quote,\n      expectedRecordLength: options.columns === null ? 0 : options.columns.length,\n      field: new ResizeableBuffer(20),\n      firstLineToHeaders: fnFirstLineToHeaders,\n      info: Object.assign({}, this.info),\n      previousBuf: undefined,\n      quoting: false,\n      stop: false,\n      rawBuffer: new ResizeableBuffer(100),\n      record: [],\n      recordHasError: false,\n      record_length: 0,\n      recordDelimiterMaxLength: options.record_delimiter.length === 0 ? 2 : Math.max(...options.record_delimiter.map( (v) => v.length)),\n      trimChars: [Buffer.from(' ')[0], Buffer.from('\\t')[0]],\n      wasQuoting: false,\n      wasRowDelimiter: false\n    }\n  }\n  // Implementation of `Transform._transform`\n  _transform(buf, encoding, callback){\n    if(this.state.stop === true){\n      return\n    }\n    const err = this.__parse(buf, false)\n    if(err !== undefined){\n      this.state.stop = true\n    }\n    callback(err)\n  }\n  // Implementation of `Transform._flush`\n  _flush(callback){\n    if(this.state.stop === true){\n      return\n    }\n    const err = this.__parse(undefined, true)\n    callback(err)\n  }\n  // Central parser implementation\n  __parse(nextBuf, end){\n    const {bom, comment, escape, from_line, info, ltrim, max_record_size, quote, raw, relax, rtrim, skip_empty_lines, to, to_line} = this.options\n    let {record_delimiter} = this.options\n    const {bomSkipped, previousBuf, rawBuffer, escapeIsQuote} = this.state\n    let buf\n    if(previousBuf === undefined){\n      if(nextBuf === undefined){\n        // Handle empty string\n        this.push(null)\n        return\n      }else{\n        buf = nextBuf\n      }\n    }else if(previousBuf !== undefined && nextBuf === undefined){\n      buf = previousBuf\n    }else{\n      buf = Buffer.concat([previousBuf, nextBuf])\n    }\n    // Handle UTF BOM\n    if(bomSkipped === false){\n      if(bom === false){\n        this.state.bomSkipped = true\n      }else if(buf.length < 3){\n        // No enough data\n        if(end === false){\n          // Wait for more data\n          this.state.previousBuf = buf\n          return\n        }\n        // skip BOM detect because data length < 3\n      }else{\n        if(bom_utf8.compare(buf, 0, 3) === 0){\n          // Skip BOM\n          buf = buf.slice(3)\n        }\n        this.state.bomSkipped = true\n      }\n    }\n    const bufLen = buf.length\n    let pos\n    for(pos = 0; pos < bufLen; pos++){\n      // Ensure we get enough space to look ahead\n      // There should be a way to move this out of the loop\n      if(this.__needMoreData(pos, bufLen, end)){\n        break\n      }\n      if(this.state.wasRowDelimiter === true){\n        this.info.lines++\n        if(info === true && this.state.record.length === 0 && this.state.field.length === 0 && this.state.wasQuoting === false){\n          this.state.info = Object.assign({}, this.info)\n        }\n        this.state.wasRowDelimiter = false\n      }\n      if(to_line !== -1 && this.info.lines > to_line){\n        this.state.stop = true\n        this.push(null)\n        return\n      }\n      // Auto discovery of record_delimiter, unix, mac and windows supported\n      if(this.state.quoting === false && record_delimiter.length === 0){\n        const record_delimiterCount = this.__autoDiscoverRowDelimiter(buf, pos)\n        if(record_delimiterCount){\n          record_delimiter = this.options.record_delimiter\n        }\n      }\n      const chr = buf[pos]\n      if(raw === true){\n        rawBuffer.append(chr)\n      }\n      if((chr === cr || chr === nl) && this.state.wasRowDelimiter === false ){\n        this.state.wasRowDelimiter = true\n      }\n      // Previous char was a valid escape char\n      // treat the current char as a regular char\n      if(this.state.escaping === true){\n        this.state.escaping = false\n      }else{\n        // Escape is only active inside quoted fields\n        // We are quoting, the char is an escape chr and there is a chr to escape\n        if(this.state.quoting === true && chr === escape && pos + 1 < bufLen){\n          if(escapeIsQuote){\n            if(buf[pos+1] === quote){\n              this.state.escaping = true\n              continue\n            }\n          }else{\n            this.state.escaping = true\n            continue\n          }\n        }\n        // Not currently escaping and chr is a quote\n        // TODO: need to compare bytes instead of single char\n        if(this.state.commenting === false && chr === quote){\n          if(this.state.quoting === true){\n            const nextChr = buf[pos+1]\n            const isNextChrTrimable = rtrim && this.__isCharTrimable(nextChr)\n            // const isNextChrComment = nextChr === comment\n            const isNextChrComment = comment !== null && this.__compareBytes(comment, buf, pos+1, nextChr)\n            const isNextChrDelimiter = this.__isDelimiter(nextChr, buf, pos+1)\n            const isNextChrRowDelimiter = record_delimiter.length === 0 ? this.__autoDiscoverRowDelimiter(buf, pos+1) : this.__isRecordDelimiter(nextChr, buf, pos+1)\n            // Escape a quote\n            // Treat next char as a regular character\n            // TODO: need to compare bytes instead of single char\n            if(chr === escape && nextChr === quote){\n              pos++\n            }else if(!nextChr || isNextChrDelimiter || isNextChrRowDelimiter || isNextChrComment || isNextChrTrimable){\n              this.state.quoting = false\n              this.state.wasQuoting = true\n              continue\n            }else if(relax === false){\n              const err = this.__error(\n                new CsvError('CSV_INVALID_CLOSING_QUOTE', [\n                  'Invalid Closing Quote:',\n                  `got \"${String.fromCharCode(nextChr)}\"`,\n                  `at line ${this.info.lines}`,\n                  'instead of delimiter, row delimiter, trimable character',\n                  '(if activated) or comment',\n                ], this.__context())\n              )\n              if(err !== undefined) return err\n            }else{\n              this.state.quoting = false\n              this.state.wasQuoting = true\n              // continue\n              this.state.field.prepend(quote)\n            }\n          }else{\n            if(this.state.field.length !== 0){\n              // In relax mode, treat opening quote preceded by chrs as regular\n              if( relax === false ){\n                const err = this.__error(\n                  new CsvError('INVALID_OPENING_QUOTE', [\n                    'Invalid Opening Quote:',\n                    `a quote is found inside a field at line ${this.info.lines}`,\n                  ], this.__context(), {\n                    field: this.state.field,\n                  })\n                )\n                if(err !== undefined) return err\n              }\n            }else{\n              this.state.quoting = true\n              continue\n            }\n          }\n        }\n        if(this.state.quoting === false){\n          let recordDelimiterLength = this.__isRecordDelimiter(chr, buf, pos)\n          if(recordDelimiterLength !== 0){\n            // Do not emit comments which take a full line\n            const skipCommentLine = this.state.commenting && (this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0)\n            if(skipCommentLine){\n              this.info.comment_lines++\n              // Skip full comment line\n            }else{\n              // Skip if line is empty and skip_empty_lines activated\n              if(skip_empty_lines === true && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0){\n                this.info.empty_lines++\n                pos += recordDelimiterLength - 1\n                continue\n              }\n              // Activate records emition if above from_line\n              if(this.state.enabled === false && this.info.lines + (this.state.wasRowDelimiter === true ? 1: 0 ) >= from_line){\n                this.state.enabled = true\n                this.__resetField()\n                this.__resetRow()\n                pos += recordDelimiterLength - 1\n                continue\n              }else{\n                const errField = this.__onField()\n                if(errField !== undefined) return errField\n                const errRecord = this.__onRow()\n                if(errRecord !== undefined) return errRecord\n              }\n              if(to !== -1 && this.info.records >= to){\n                this.state.stop = true\n                this.push(null)\n                return\n              }\n            }\n            this.state.commenting = false\n            pos += recordDelimiterLength - 1\n            continue\n          }\n          if(this.state.commenting){\n            continue\n          }\n          const commentCount = comment === null ? 0 : this.__compareBytes(comment, buf, pos, chr)\n          if(commentCount !== 0){\n            this.state.commenting = true\n            continue\n          }\n          let delimiterLength = this.__isDelimiter(chr, buf, pos)\n          if(delimiterLength !== 0){\n            const errField = this.__onField()\n            if(errField !== undefined) return errField\n            pos += delimiterLength - 1\n            continue\n          }\n        }\n      }\n      if(this.state.commenting === false){\n        if(max_record_size !== 0 && this.state.record_length + this.state.field.length > max_record_size){\n          const err = this.__error(\n            new CsvError('CSV_MAX_RECORD_SIZE', [\n              'Max Record Size:',\n              'record exceed the maximum number of tolerated bytes',\n              `of ${max_record_size}`,\n              `at line ${this.info.lines}`,\n            ], this.__context())\n          )\n          if(err !== undefined) return err\n        }\n      }\n\n      const lappend = ltrim === false || this.state.quoting === true || this.state.field.length !== 0 || !this.__isCharTrimable(chr)\n      // rtrim in non quoting is handle in __onField\n      const rappend = rtrim === false || this.state.wasQuoting === false\n      if( lappend === true && rappend === true ){\n        this.state.field.append(chr)\n      }else if(rtrim === true && !this.__isCharTrimable(chr)){\n        const err = this.__error(\n          new CsvError('CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE', [\n            'Invalid Closing Quote:',\n            'found non trimable byte after quote',\n            `at line ${this.info.lines}`,\n          ], this.__context())\n        )\n        if(err !== undefined) return err\n      }\n    }\n    if(end === true){\n      // Ensure we are not ending in a quoting state\n      if(this.state.quoting === true){\n        const err = this.__error(\n          new CsvError('CSV_QUOTE_NOT_CLOSED', [\n            'Quote Not Closed:',\n            `the parsing is finished with an opening quote at line ${this.info.lines}`,\n          ], this.__context())\n        )\n        if(err !== undefined) return err\n      }else{\n        // Skip last line if it has no characters\n        if(this.state.wasQuoting === true || this.state.record.length !== 0 || this.state.field.length !== 0){\n          const errField = this.__onField()\n          if(errField !== undefined) return errField\n          const errRecord = this.__onRow()\n          if(errRecord !== undefined) return errRecord\n        }else if(this.state.wasRowDelimiter === true){\n          this.info.empty_lines++\n        }else if(this.state.commenting === true){\n          this.info.comment_lines++\n        }\n      }\n    }else{\n      this.state.previousBuf = buf.slice(pos)\n    }\n    if(this.state.wasRowDelimiter === true){\n      this.info.lines++\n      this.state.wasRowDelimiter = false\n    }\n  }\n  // Helper to test if a character is a space or a line delimiter\n  __isCharTrimable(chr){\n    return chr === space || chr === tab || chr === cr || chr === nl\n  }\n  __onRow(){\n    const {columns, info, from, relax_column_count, relax_column_count_less, relax_column_count_more, raw, skip_lines_with_empty_values} = this.options\n    const {enabled, record} = this.state\n    if(enabled === false){\n      return this.__resetRow()\n    }\n    // Convert the first line into column names\n    const recordLength = record.length\n    if(columns === true){\n      if(isRecordEmpty(record)){\n        this.__resetRow()\n        return\n      }\n      return this.__firstLineToColumns(record)\n    }\n    if(columns === false && this.info.records === 0){\n      this.state.expectedRecordLength = recordLength\n    }\n    if(recordLength !== this.state.expectedRecordLength){\n      if(relax_column_count === true || \n        (relax_column_count_less === true && recordLength < this.state.expectedRecordLength) ||\n        (relax_column_count_more === true && recordLength > this.state.expectedRecordLength) ){\n        this.info.invalid_field_length++\n      }else{\n        if(columns === false){\n          const err = this.__error(\n            new CsvError('CSV_INCONSISTENT_RECORD_LENGTH', [\n              'Invalid Record Length:',\n              `expect ${this.state.expectedRecordLength},`,\n              `got ${recordLength} on line ${this.info.lines}`,\n            ], this.__context(), {\n              record: record,\n            })\n          )\n          if(err !== undefined) return err\n        }else{\n          const err = this.__error(\n            // CSV_INVALID_RECORD_LENGTH_DONT_MATCH_COLUMNS\n            new CsvError('CSV_RECORD_DONT_MATCH_COLUMNS_LENGTH', [\n              'Invalid Record Length:',\n              `columns length is ${columns.length},`, // rename columns\n              `got ${recordLength} on line ${this.info.lines}`,\n            ], this.__context(), {\n              record: record,\n            })\n          )\n          if(err !== undefined) return err\n        }\n      }\n    }\n    if(skip_lines_with_empty_values === true){\n      if(isRecordEmpty(record)){\n        this.__resetRow()\n        return\n      }\n    }\n    if(this.state.recordHasError === true){\n      this.__resetRow()\n      this.state.recordHasError = false\n      return\n    }\n    this.info.records++\n    if(from === 1 || this.info.records >= from){\n      if(columns !== false){\n        const obj = {}\n        // Transform record array to an object\n        for(let i in record){\n          if(columns[i] === undefined || columns[i].disabled) continue\n          obj[columns[i].name] = record[i]\n        }\n        const {objname} = this.options\n        if(objname === undefined){\n          if(raw === true || info === true){\n            this.__push(Object.assign(\n              {record: obj},\n              (raw === true ? {raw: this.state.rawBuffer.toString()}: {}),\n              (info === true ? {info: this.state.info}: {})\n            ))\n          }else{\n            this.__push(obj)\n          }\n        }else{\n          if(raw === true || info === true){\n            this.__push(Object.assign(\n              {record: [obj[objname], obj]},\n              raw === true ? {raw: this.state.rawBuffer.toString()}: {},\n              info === true ? {info: this.state.info}: {}\n            ))\n          }else{\n            this.__push([obj[objname], obj])\n          }\n        }\n      }else{\n        if(raw === true || info === true){\n          this.__push(Object.assign(\n            {record: record},\n            raw === true ? {raw: this.state.rawBuffer.toString()}: {},\n            info === true ? {info: this.state.info}: {}\n          ))\n        }else{\n          this.__push(record)\n        }\n      }\n    }\n    this.__resetRow()\n  }\n  __firstLineToColumns(record){\n    const {firstLineToHeaders} = this.state\n    try{\n      const headers = firstLineToHeaders === undefined ? record : firstLineToHeaders.call(null, record)\n      if(!Array.isArray(headers)){\n        return this.__error(\n          new CsvError('CSV_INVALID_COLUMN_MAPPING', [\n            'Invalid Column Mapping:',\n            'expect an array from column function,',\n            `got ${JSON.stringify(headers)}`\n          ], this.__context(), {\n            headers: headers,\n          })\n        )\n      }\n      const normalizedHeaders = normalizeColumnsArray(headers)\n      this.state.expectedRecordLength = normalizedHeaders.length\n      this.options.columns = normalizedHeaders\n      this.__resetRow()\n      return\n    }catch(err){\n      return err\n    }\n  }\n  __resetRow(){\n    if(this.options.raw === true){\n      this.state.rawBuffer.reset()\n    }\n    this.state.record = []\n    this.state.record_length = 0\n  }\n  __onField(){\n    const {cast, rtrim, max_record_size} = this.options\n    const {enabled, wasQuoting} = this.state\n    // Short circuit for the from_line options\n    if(enabled === false){ /* this.options.columns !== true && */\n      return this.__resetField()\n    }\n    let field = this.state.field.toString()\n    if(rtrim === true && wasQuoting === false){\n      field = field.trimRight()\n    }\n    if(cast === true){\n      const [err, f] = this.__cast(field)\n      if(err !== undefined) return err\n      field = f\n    }\n    this.state.record.push(field)\n    // Increment record length if record size must not exceed a limit\n    if(max_record_size !== 0 && typeof field === 'string'){\n      this.state.record_length += field.length\n    }\n    this.__resetField()\n  }\n  __resetField(){\n    this.state.field.reset()\n    this.state.wasQuoting = false\n  }\n  __push(record){\n    const {on_record} = this.options\n    if(on_record !== undefined){\n      const context = this.__context()\n      record = on_record.call(null, record, context)\n      if(record === undefined || record === null){ return }\n    }\n    this.push(record)\n  }\n  // Return a tuple with the error and the casted value\n  __cast(field){\n    const {columns, relax_column_count} = this.options\n    const isColumns = Array.isArray(columns)\n    // Dont loose time calling cast\n    // because the final record is an object\n    // and this field can't be associated to a key present in columns\n    if( isColumns === true && relax_column_count && this.options.columns.length <= this.state.record.length ){\n      return [undefined, undefined]\n    }\n    const context = this.__context()\n    if(this.state.castField !== null){\n      try{\n        return [undefined, this.state.castField.call(null, field, context)]\n      }catch(err){\n        return [err]\n      }\n    }\n    if(this.__isFloat(field)){\n      return [undefined, parseFloat(field)]\n    }else if(this.options.cast_date !== false){\n      return [undefined, this.options.cast_date.call(null, field, context)]\n    }\n    return [undefined, field]\n  }\n  // Keep it in case we implement the `cast_int` option\n  // __isInt(value){\n  //   // return Number.isInteger(parseInt(value))\n  //   // return !isNaN( parseInt( obj ) );\n  //   return /^(\\-|\\+)?[1-9][0-9]*$/.test(value)\n  // }\n  __isFloat(value){\n    return (value - parseFloat( value ) + 1) >= 0 // Borrowed from jquery\n  }\n  __compareBytes(sourceBuf, targetBuf, pos, firtByte){\n    if(sourceBuf[0] !== firtByte) return 0\n    const sourceLength = sourceBuf.length\n    for(let i = 1; i < sourceLength; i++){\n      if(sourceBuf[i] !== targetBuf[pos+i]) return 0\n    }\n    return sourceLength\n  }\n  __needMoreData(i, bufLen, end){\n    if(end){\n      return false\n    }\n    const {comment, delimiter} = this.options\n    const {quoting, recordDelimiterMaxLength} = this.state\n    const numOfCharLeft = bufLen - i - 1\n    const requiredLength = Math.max(\n      // Skip if the remaining buffer smaller than comment\n      comment ? comment.length : 0,\n      // Skip if the remaining buffer smaller than row delimiter\n      recordDelimiterMaxLength,\n      // Skip if the remaining buffer can be row delimiter following the closing quote\n      // 1 is for quote.length\n      quoting ? (1 + recordDelimiterMaxLength) : 0,\n      // Skip if the remaining buffer can be delimiter\n      delimiter.length,\n      // Skip if the remaining buffer can be escape sequence\n      // 1 is for escape.length\n      1\n    )\n    return numOfCharLeft < requiredLength\n  }\n  __isDelimiter(chr, buf, pos){\n    const {delimiter} = this.options\n    const delLength = delimiter.length\n    if(delimiter[0] !== chr) return 0\n    for(let i = 1; i < delLength; i++){\n      if(delimiter[i] !== buf[pos+i]) return 0\n    }\n    return delimiter.length\n  }\n  __isRecordDelimiter(chr, buf, pos){\n    const {record_delimiter} = this.options\n    const recordDelimiterLength = record_delimiter.length\n    loop1: for(let i = 0; i < recordDelimiterLength; i++){\n      const rd = record_delimiter[i]\n      const rdLength = rd.length\n      if(rd[0] !== chr){\n        continue\n      }\n      for(let j = 1; j < rdLength; j++){\n        if(rd[j] !== buf[pos+j]){\n          continue loop1\n        }\n      }\n      return rd.length\n    }\n    return 0\n  }\n  __autoDiscoverRowDelimiter(buf, pos){\n    const chr = buf[pos]\n    if(chr === cr){\n      if(buf[pos+1] === nl){\n        this.options.record_delimiter.push(Buffer.from('\\r\\n'))\n        this.state.recordDelimiterMaxLength = 2\n        return 2\n      }else{\n        this.options.record_delimiter.push(Buffer.from('\\r'))\n        this.state.recordDelimiterMaxLength = 1\n        return 1\n      }\n    }else if(chr === nl){\n      this.options.record_delimiter.push(Buffer.from('\\n'))\n      this.state.recordDelimiterMaxLength = 1\n      return 1\n    }\n    return 0\n  }\n  __error(msg){\n    const {skip_lines_with_error} = this.options\n    const err = typeof msg === 'string' ? new Error(msg) : msg\n    if(skip_lines_with_error){\n      this.state.recordHasError = true\n      this.emit('skip', err)\n      return undefined\n    }else{\n      return err\n    }\n  }\n  __context(){\n    const {columns} = this.options\n    const isColumns = Array.isArray(columns)\n    return {\n      column: isColumns === true ?\n        ( columns.length > this.state.record.length ?\n          columns[this.state.record.length].name :\n          null\n        ) :\n        this.state.record.length,\n      empty_lines: this.info.empty_lines,\n      header: columns === true,\n      index: this.state.record.length,\n      invalid_field_length: this.info.invalid_field_length,\n      quoting: this.state.wasQuoting,\n      lines: this.info.lines,\n      records: this.info.records\n    }\n  }\n}\n\nconst parse = function(){\n  let data, options, callback\n  for(let i in arguments){\n    const argument = arguments[i]\n    const type = typeof argument\n    if(data === undefined && (typeof argument === 'string' || Buffer.isBuffer(argument))){\n      data = argument\n    }else if(options === undefined && isObject(argument)){\n      options = argument\n    }else if(callback === undefined && type === 'function'){\n      callback = argument\n    }else{\n      throw new CsvError('CSV_INVALID_ARGUMENT', [\n        'Invalid argument:',\n        `got ${JSON.stringify(argument)} at index ${i}`\n      ])\n    }\n  }\n  const parser = new Parser(options)\n  if(callback){\n    const records = options === undefined || options.objname === undefined ? [] : {}\n    parser.on('readable', function(){\n      let record\n      while((record = this.read()) !== null){\n        if(options === undefined || options.objname === undefined){\n          records.push(record)\n        }else{\n          records[record[0]] = record[1]\n        }\n      }\n    })\n    parser.on('error', function(err){\n      callback(err, undefined, parser.info)\n    })\n    parser.on('end', function(){\n      callback(undefined, records, parser.info)\n    })\n  }\n  if(data !== undefined){\n    parser.write(data)\n    parser.end()\n  }\n  return parser\n}\n\nclass CsvError extends Error {\n  constructor(code, message, ...contexts) {\n    if(Array.isArray(message)) message = message.join(' ')\n    super(message)\n    if(Error.captureStackTrace !== undefined){\n      Error.captureStackTrace(this, CsvError)\n    }\n    this.code = code\n    for(const context of contexts){\n      for(const key in context){\n        const value = context[key]\n        this[key] = Buffer.isBuffer(value) ? value.toString() : value == null ? value : JSON.parse(JSON.stringify(value))\n      }\n    }\n  }\n}\n\nparse.Parser = Parser\n\nparse.CsvError = CsvError\n\nmodule.exports = parse\n\nconst underscore = function(str){\n  return str.replace(/([A-Z])/g, function(_, match){\n    return '_' + match.toLowerCase()\n  })\n}\n\nconst isObject = function(obj){\n  return (typeof obj === 'object' && obj !== null && !Array.isArray(obj))\n}\n\nconst isRecordEmpty = function(record){\n  return record.every( (field) => field == null || field.toString && field.toString().trim() === '' )\n}\n\nconst normalizeColumnsArray = function(columns){\n  const normalizedColumns = [];\n\n  for(let i=0; i< columns.length; i++){\n    const column = columns[i]\n    if(column === undefined || column === null || column === false){\n      normalizedColumns[i] = { disabled: true }\n    }else if(typeof column === 'string'){\n      normalizedColumns[i] = { name: column }\n    }else if(isObject(column)){\n      if(typeof column.name !== 'string'){\n        throw new CsvError('CSV_OPTION_COLUMNS_MISSING_NAME', [\n          'Option columns missing name:',\n          `property \"name\" is required at position ${i}`,\n          'when column is an object literal'\n        ])\n      }\n      normalizedColumns[i] = column\n    }else{\n      throw new CsvError('CSV_INVALID_COLUMN_DEFINITION', [\n        'Invalid column definition:',\n        'expect a string or a literal object,',\n        `got ${JSON.stringify(column)} at position ${i}`\n      ])\n    }\n  }\n  return normalizedColumns;\n}\n"},"lineCount":1090}},"error":null,"hash":"101c6d52f54d906dc82366ea201b43be","cacheData":{"env":{}}}