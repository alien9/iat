{"id":"node_modules/csv-sniffer/index.js","dependencies":[{"name":"/home/tiago/works/iat/render/package.json","includedInParent":true,"mtime":1578598424483},{"name":"/home/tiago/works/iat/render/node_modules/csv-sniffer/package.json","includedInParent":true,"mtime":1578582354624}],"generated":{"js":"/** \n * CSV sniffer, inspired by the Python CSV library (https://docs.python.org/2/library/csv.html#csv.Sniffer)\n *\n * We implement approximately the same functionality, but we do not pack it in two seperate\n * functions (sniff and has_header) but we do everything inside the sniff function. To\n * prevent doing superfluous work, the user can instruct the sniff function what to do by providing\n * the right arguments to the function. The main reason to do this was because the has_header function\n * in Pythons CSV library makes a call to the sniff function, hence if a user wants to find out everything,\n * sniff will be called twice. Furthermore, we did not implement functionality that we did not need, \n * and we implemented some things that we did need but were not yet in the Python CSV sniffer.\n * Major differences:\n *    Our sniffer does not calculate doublequote and skipinitialwhitespace\n *    Our sniffer also retrieves the newline character as one of [\\r\\n, \\n\\r, \\n, \\r] in a clever way\n *    Our sniffer improves the performance of the delimiter guesser by not traversing every line of the\n *    input for every ASCII character, but rather traversing every line once and incrementing a corresponding\n *    counter for every encountered character.\n *\t  We implement a smarter voting mechanism in the hasHeader check. We also accept give header +1 when\n *    the length of the header column is within some tolerance depending on standard deviation of all \n *    lengths inside this column.\n *\t  Our sniffer passes back labels and records\n */\n\nfunction getNewlineStr(sample) {\n\t// Figures out what the most probable row delimiter is. \n\t// It does this by registering the line lengths that would arise if a row delimiter\n\t// would be used. If there is exactly one candidate, this candidate wins.\n\t// Otherwise, if there is exactly one candidate that causes > n lines, this one wins. This\n\t// is built in to prevent candidates with just a couple of lines challenging ones with many\n\t// lines, since if we have a candidate with 2 and a candidate with 90 lines, it seems safe\n\t// to assume the one with 90 lines always wins. Furthermore, doing statistics on very few lines\n\t// is not safe anyway. \n\t// As a last resort, we have to give a solution for when we have more than one candidate\n\t// with > n lines. We then calculate for every candidate the average and the standard\n\t// deviation of the line lengths found. The winning candidate is the one with the \n\t// smallest normalized standard deviation.\n\tvar candidates = [\"\\r\\n\", \"\\n\\r\", \"\\n\", \"\\r\"];\n\tvar nrLines = {};\n\n\tvar lineLengths = {};\n\tvar threshold = 5; // at least this many lines\n\n\tcandidates.forEach(function(newlineStr) {\n\t\tnrLines[newlineStr] = 1;\n\t\tvar l = [];\n\t\tvar curPos = 0;\n\t\twhile((newlinePos = sample.indexOf(newlineStr, curPos)) > -1) {\n\t\t\t// update nr of lines\n\t\t\t++nrLines[newlineStr];\n\n\t\t\tvar lineLength = newlinePos - curPos;\n\t\t\tl.push(lineLength);\n\t\t\tcurPos = newlinePos + newlineStr.length;\n\t\t}\n\t\tlineLengths[newlineStr] = l;\n\t});\n\n\t// eliminate substrings of \\r\\n and \\n\\r whenever they have an equal amount of lines\n\t[\"\\r\\n\", \"\\n\\r\"].forEach(function(newlineStr) {\n\t\tvar nr = nrLines[newlineStr];\n\t\tif(nr > 1) {\n\t\t\t[\"\\n\", \"\\r\"].forEach(function(newlineStr) {\n\t\t\t\tif(nrLines[newlineStr] == nr) {\n\t\t\t\t\tnrLines[newlineStr] = 1;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\t// make list of remaining candidates, which are the only ones with > 1 line\n\tvar remainingCandidates = [];\n\tcandidates.forEach(function(newlineStr) {\n\t\tif(nrLines[newlineStr] > 1) {\n\t\t\tremainingCandidates.push(newlineStr);\n\t\t}\n\t});\n\n\tif(remainingCandidates.length == 0) {\n\t\treturn null;\n\t}\n\tif(remainingCandidates.length == 1) {\n\t\treturn remainingCandidates[0];\n\t}\n\n\t// > 1 remainers, make list of valid onces, which must have a nr lines > threshold\n\tvar finalRemainers = [];\n\tvar maxNrLines = 0;\n\tremainingCandidates.forEach(function(newlineStr) {\n\t\tvar curNrLines = nrLines[newlineStr];\n\t\tmaxNrLines = Math.max(maxNrLines, curNrLines);\n\t\tif(curNrLines > threshold) {\n\t\t\tfinalRemainers.push(newlineStr);\n\t\t}\n\t});\n\n\tif(finalRemainers.length == 0) {\n\t\tvar winner = null;\n\t\t// no newlinestrs with more than 'threshold' lines... return the one with the max nr of lines\n\t\tremainingCandidates.some(function(newlineStr) {\n\t\t\tif(nrLines[newlineStr] == maxNrLines) {\n\t\t\t\twinner = newlineStr;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t\treturn winner;\n\t}\n\tif(finalRemainers.length == 1) {\n\t\treturn finalRemainers[0];\n\t}\n\n\t// Time for the final round with the > 1 remainers...\n\tvar winner = null;\n\tvar winnerScore = Infinity;\n\tfinalRemainers.forEach(function(newlineStr) {\n\t\tvar l = lineLengths[newlineStr];\n\t\tvar sum = 0;\n\t\tl.forEach(function(d) { sum += d; });\n\t\tvar avg = sum / l.length;\n\n\t\tvar absSum = 0;\n\t\tl.forEach(function(d) { absSum += Math.abs(d - avg); });\n\t\tvar score = absSum / l.length / avg; // this calculates absolute differences, normalized to # lines and length of lines\n\n\t\tif(score < winnerScore) {\n\t\t\twinnerScore = score;\n\t\t\twinner = newlineStr;\n\t\t}\n\t});\n\treturn winner;\n}\n\n\n\nfunction guessQuoteAndDelimiter(sample, newlineStr, delimiters) {\n\t// Looks for text enclosed between two identical quotes\n    // (the probable quotechar) which are preceded and followed\n    // by the same character (the probable delimiter).\n    // For example:\n    //   ,'some text',\n    // The quote with the most wins, same with the delimiter.\n    // If there is no quotechar the delimiter can't be determined\n    // this way.\n    var exprs = [];\n\n    // TODO: Consider un-consuming the delimiter after a match has been found\n\n    var nl = newlineStr.replace(\"\\n\", \"\\\\n\").replace(\"\\r\", \"\\\\r\");\n\n    // Add regexp for quotes + delimiter on both sides\n    var delimiter = \"([^\"+nl+\"\\\"'])\";\n    var content = \"[^\"+nl+\"]*?\";\n    exprs.push({\n    \texpr: new RegExp(\n\t\t    \tdelimiter\t\t\t+ // Delimiter\n\t\t    \t\"\\\\s*?\"\t\t\t\t+ // Possible whitespace between delimiter and quote char\n\t\t    \t\"([\\\"'])\"\t\t\t+ // Quote character\n\t\t    \tcontent\t\t\t\t+ // Non-greedy parsing of string between quotes\n\t\t    \t\"\\\\2\"\t\t\t\t+ // Matching quote character\n\t\t    \t\"\\\\s*?\"\t\t\t\t+ // Possible whitespace between quote char and delimiter\n\t\t    \t\"\\\\1\"\t\t\t\t  // Matching delimiter\n\t    \t, \"g\"),\n    \tdelimRef: 1,\n    \tquoteRef: 2\n\t});\n\n\t// Add regexp for quotes + delimiter on the right side\n\texprs.push({\n\t\texpr: new RegExp(\n\t\t    \t\"^\"\t\t\t\t\t+ // Start of line (note that javascript treats the start of every line as ^)\n\t\t    \t\"\\\\s*?\"\t\t\t\t+ // Possible whitespace at start of line\n\t\t    \t\"([\\\"'])\"\t\t\t+ // Quote character\n\t\t    \tcontent\t\t\t\t+ // Non-greedy parsing of string between quotes\n\t\t    \t\"\\\\1\"\t\t\t\t+ // Matching quote character\n\t\t    \t\"\\\\s*?\"\t\t\t\t+ // Possible whitespace between quote char and delimiter\n\t\t    \tdelimiter\t\t\t  // Delimiter\n\t    \t, \"g\"),\n\t\tdelimRef: 2,\n\t\tquoteRef: 1\n\t});\n\n\t// Add regexp for quotes + delimiter on the left side\n\texprs.push({\n\t\texpr: new RegExp(\n\t\t    \tdelimiter\t\t\t+ // Delimiter\n\t\t    \t\"\\\\s*?\"\t\t\t\t+ // Possible whitespace between delimiter and quote char\n\t\t    \t\"([\\\"'])\"\t\t\t+ // Quote character\n\t\t    \tcontent\t\t\t\t+ // Non-greedy parsing of string between quotes\n\t\t    \t\"\\\\2\"\t\t\t\t+ // Matching quote character\n\t\t    \t\"\\\\s*?\"\t\t\t\t+ // Possible whitespace between quote char and end of line\n\t\t    \t\"$\"\t\t\t\t\t  // End of line (note that javascript treats the end of every line as $)\n\t    \t, \"g\"),\n\t\tdelimRef: 1,\n\t\tquoteRef: 2\n\t});\n\n\t// Add regexp for just quotes\n\texprs.push({\n\t\texpr: new RegExp(\n\t\t    \t\"^\"\t\t\t\t\t+ // Start of line (note that javascript treats the start of every line as ^)\n\t\t    \t\"\\\\s*?\"\t\t\t\t+ // Possible whitespace at start of line\n\t\t    \t\"([\\\"'])\"\t\t\t+ // Quote character\n\t\t    \tcontent\t\t\t\t+ // Non-greedy parsing of string between quotes\n\t\t    \t\"\\\\1\"\t\t\t\t+ // Matching quote character\n\t\t    \t\"\\\\s*?\"\t\t\t\t+ // Possible whitespace between quote char and end of line\n\t\t    \t\"$\"\t\t\t\t\t  // End of line (note that javascript treats the end of every line as $)\n\t    \t, \"g\"),\n\t\tquoteRef: 1\n\t});\n\n\tvar matches = [];\n\n\texprs.every(function(d) { // use every here, so we can stop the loop by returning false\n\t\tvar matchesNew;\n\t\twhile(matchesNew = d.expr.exec(sample)) {\n\t\t\tvar match = {};\n\t\t\tif(d.delimRef && matchesNew[d.delimRef]) match.delim = matchesNew[d.delimRef];\n\t\t\tif(d.quoteRef && matchesNew[d.quoteRef]) match.quote = matchesNew[d.quoteRef];\n\t\t\tmatches.push(match);\n\t\t}\n\n\t\treturn matches.length == 0; // only go to next regexp if matches is still empty\n\t});\n\tif(matches.length == 0) {\n\t\treturn { delim: null, quote: null };\n\t}\n\n\tvar delimCounters = {};\n\tvar quoteCounters = {};\n\n\tmatches.forEach(function(d) {\n\t\tif(d.hasOwnProperty(\"delim\") && (!delimiters || delimiters.indexOf(d.delim) > -1)) {\n\t\t\tif(!delimCounters.hasOwnProperty(d.delim)) \tdelimCounters[d.delim] = 1;\n\t\t\telse\t \t\t\t\t\t\t\t\t\t++delimCounters[d.delim];\n\t\t}\n\t\tif(d.hasOwnProperty(\"quote\")) {\n\t\t\tif(!quoteCounters.hasOwnProperty(d.quote)) \tquoteCounters[d.quote] = 1;\n\t\t\telse\t\t\t\t\t\t\t\t\t\t++quoteCounters[d.quote];\n\t\t}\n\t});\n\n\tvar delims = Object.keys(delimCounters);\n\tvar quotes = Object.keys(quoteCounters);\n\n\tvar delim = null;\n\tif(delims.length > 0) {\n\t\tvar maxCount = -1;\n\t\tdelims.forEach(function(d) { \n\t\t\tif(delimCounters[d] > maxCount) {\n\t\t\t\tdelim = d;\n\t\t\t\tmaxCount = delimCounters[d];\n\t\t\t}\n\t\t});\n\t}\n\n\tvar maxCount = -1;\n\tquotes.forEach(function(d) {\n\t\tif(quoteCounters[d] > maxCount) {\n\t\t\tquote = d;\n\t\t\tmaxCount = quoteCounters[d];\n\t\t}\n\t});\n\n\tif(delim == \"\\n\") {\n\t\t// This is probably a one column file...\n\t\tdelim = null;\n\t}\n\n\treturn {\n\t\tdelim: delim,\n\t\tquote: quote\n\t}\n}\n\nfunction guessDelimiter(sample, newlineStr, delimiters) {\n\t// The delimiter /should/ occur the same number of times on\n    // each row. However, due to malformed data, it may not. We don't want\n    // an all or nothing approach, so we allow for small variations in this\n    // number.\n    //   1) build a table of the frequency of each character on every line.\n    //   2) build a table of frequencies of this frequency (meta-frequency?),\n    //      e.g.  'x occurred 5 times in 10 rows, 6 times in 1000 rows,\n    //      7 times in 2 rows'\n    //   3) use the mode of the meta-frequency to determine the /expected/\n    //      frequency for that character\n    //   4) find out how often the character actually meets that goal\n    //   5) the character that best meets its goal is the delimiter\n\n\t// define a range in which to search for ASCII characters\n\tvar startAsciiAt = 0;\n\tvar asciiMax = 127;\n\n\tvar asciiTables = [];\n\n\tvar curCharIndex = 0;\n\tvar nrLines = 0;\n\tvar newlinePos;\n\twhile((newlinePos = sample.indexOf(newlineStr, curCharIndex)) > -1) {\n\t\t// for every line, we build an ascii table that keeps the number of occurrences\n\t\tvar ascii = [];\n\t\tfor(var i=0; i<asciiMax-startAsciiAt; ++i) {\n\t\t\tascii.push(0); // all chars start with 0\n\t\t}\n\t\twhile(curCharIndex < newlinePos) {\n\t\t\t++ascii[sample.charCodeAt(curCharIndex)-startAsciiAt];\n\t\t\t++curCharIndex;\n\t\t}\n\t\t// skip over the newline string\n\t\tcurCharIndex += newlineStr.length;\n\n\t\t// and add this ascii table to the ascii tables array\n\t\tasciiTables.push(ascii);\n\t\t++nrLines;\n\t}\n\tif(nrLines == 0) {\n\t\treturn null;\n\t}\n\n\t// now transform the ascii tables into a 'frequency of frequency' (meta-frequency) table\n\tvar freqTables = [];\n\tfor(var i=0; i<asciiMax-startAsciiAt; ++i) {\n\t\t// for every character, we build a frequencytable\n\t\tvar freqTable = [];\n\t\tasciiTables.forEach(function(d) {\n\t\t\tif(!freqTable[d[i]]) freqTable[d[i]] =  1;\n\t\t\telse \t\t\t\t freqTable[d[i]] += 1;\n\t\t});\n\t\tfreqTables[i] = freqTable;\n\t}\n\n\t// using this meta-frequency table, we calculate the so called character 'modes', defined \n\t// for every character as the max frequency of occurences minus the sum of all other\n\t// frequencies of occurences\n\tvar modes = [];\n\tfor(var i=0; i<asciiMax-startAsciiAt; ++i) {\n\t\tvar keys = Object.keys(freqTables[i]);\n\t\tif(keys.length == 1 && keys[0] == 0) {\n\t\t\t//This character never occurs on any line\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\t// if we arrived here, we are sure that the character occurs at least once somewhere\n\n\t\t//calculate max meta frequency, and also remember the corresponding frequency\n\t\tvar max = { freq: null, metaFreq: -Infinity };\n\t\tfreqTables[i].forEach(function(metaFreq, freq) {\n\t\t\tif(metaFreq > max.metaFreq) {\n\t\t\t\tmax.freq = freq;\n\t\t\t\tmax.metaFreq = metaFreq;\n\t\t\t}\n\t\t});\n\n\t\t// calculate sum of frequencies\n\t\tvar sum = 0;\n\t\tfreqTables[i].forEach(function(d) {\n\t\t\tsum += d;\n\t\t});\n\n\t\t// we can now calculate the mode for this character\n\t\tmodes[i] = { maxFreq: max.freq, mode: max.metaFreq - (sum - max.metaFreq) }; // Equals 2max - sum\n\t}\n\n\t// We now have a mode for each character, which tells us something about the number of\n\t// meta frequencies. The higher the mode is for a character, the more likely it is that\n\t// this character is a delimiter. In the perfect case, a character occurs exactly the same\n\t// times on every line, yielding a mode that equals the number of lines.\n\t// To find the best candidates for delimiters (the ones closest to the number of lines), we\n\t// start with a consistency value of 1 and we decrease this by 0.01 every time we do not\n\t// find at least one delimiter.\n\tvar delims = [];\n\tvar consistency = 1.0;\n\tvar threshold = 0.8; // when this value is reached without finding a candidate for a delimiter, we give up...\n\tvar decreaseStep = 0.01;\n\twhile(delims.length == 0 && consistency > threshold) {\n\t\tmodes.forEach(function(d, i) {\n\t\t\tif(d.maxFreq == 0 || d.mode <= 0) return;\n\t\t\tvar delim = String.fromCharCode(i+startAsciiAt);\n\t\t\tif((d.mode / nrLines) >= consistency && (!delimiters || delimiters.indexOf(delim) > -1)) {\n\t\t\t\tdelims.push(delim);\n\t\t\t}\n\t\t});\n\t\tconsistency -= decreaseStep;\n\t}\n\n\tif(delims.length == 0) {\n\t\treturn null;\n\t}\n\n\tif(delims.length == 1) {\n\t\treturn delims[0];\n\t}\n\n\t// We have > 1 delimiter; use a list of known delimiters\n\t[\",\", \"\\t\", \";\", \" \", \":\", \"|\"].forEach(function(d) {\n\t\tif(delims.indexOf(d) > -1) {\n\t\t\treturn d;\n\t\t}\n\t});\n\n\t// We still found no apparent winner... just return the first one\n\treturn delims[0];\n}\n\nfunction parseSample(sample, newlineStr, delimiter, quotechar) {\n\t// Parse sample by creating a state machine to split lines (necessary because\n\t// we don't want to split a line if we find a newline str inside a quoted field)\n\t// Assumption of this function is that the quotechar is not contained inside the\n\t// newlineStr. This would probably devastate the parsing, but is a safe assumption\n\t// since it must be a really f*cked up format if the newline string contains the\n\t// quotechar.\n\tvar lines = [];\n\tif(!quotechar) {\n\t\t// no quote char, simple!\n\t\tlines = sample.split(newlineStr);\n\t\tif(lines.length > 1) {\n\t\t\tlines.pop(); //drop last element, since that can be an incomplete line\n\t\t}\n\t\treturn lines.map(function(line) { return line.split(delimiter); });\n\t}\n\n\t// if we arrived here, it means the real deal: a quote char needs to be considered\n\tvar result = [];\n\tvar vals = [];\n    var curVal = \"\";\n    var insideQuotes = false;\n    var escape = false;\n    for(var i=0; i<sample.length; ++i) {\n    \tvar curchar = sample.charAt(i);\n    \tif(!escape) {\n    \t\t// only do all of the checks if curchar is not escaped\n\t    \tif(curchar == \"\\\\\") {\n\t    \t\tescape = true;\n\t    \t\tcontinue;\n\t    \t}\n\t    \tif(curchar == quotechar) {\n\t    \t\tinsideQuotes = !insideQuotes;\n\t    \t\tcontinue;\n\t    \t}\n\n\t    \tif(!insideQuotes) {\n\t    \t\t// check if we are currently standing at a newline\n\t\t\t\tvar atNewline = true;\n\t\t\t\tfor(var j=0; j<newlineStr.length; ++j) {\n\t\t\t\t\tif(sample.charAt(i+j) != newlineStr.charAt(j)) {\n\t\t\t\t\t\tatNewline = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(atNewline || curchar == delimiter) {\n\t\t\t\t\tvals.push(curVal);\n\t\t\t\t\tcurVal = \"\";\n\t\t\t\t\tif(atNewline) {\n\t\t\t\t\t\tif(vals[vals.length-1] == \"\") { // remove last item if it is completely empty\n\t\t\t\t\t\t\tvals.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult.push(vals);\n\t\t\t\t\t\tvals = [];\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t    \t}\n    \t}\n    \tescape = false;\n    \tcurVal += curchar;\n    }\n    // after the loop, remaints might be in the vals array. We leave them there, since it is not considered\n    // a complete line if no newline was read after it\n    return result;\n}\n\nfunction getAccumulatedType(curValue, curType) {\n    // Note: If curType is \"integer\", this function will return the actual type of\n    // curValue\n    if(curType == \"string\") return \"string\"; //can't get worse than string\n\n    // see if we should fall back to string by seeing if this is a finite number\n    if(!isFinite(curValue)) return \"string\";\n\n    // see if we should fall back from int to float\n    if(curType == \"float\" || curValue%1 !== 0) return \"float\";\n\n    return \"integer\";\n}\n\nfunction getTypes(parsedSample) {\n\t// Parses all lines in the lines array and determines the type of all the columns.\n\t// Returns three type arrays:\n\t// - Types considering all rows\n\t// - Types considering all but the first row\n\t// - Types considering only the first row\n\n    var firstValues = null; // used to calculate the all array in the end\n    var first = [];\n    var tail = [];\n    var all = null; // will be calculated in the end\n\n    parsedSample && parsedSample.forEach(function(cols, i) {\n    \tif(i == 0) {\n    \t\tfirstValues = cols;\n    \t\tcols.forEach(function(col) {\n    \t\t\tfirst.push(getAccumulatedType(col, \"integer\"));\n    \t\t\ttail.push(\"integer\");\n    \t\t});\n    \t\treturn;\n    \t}\n    \tif(cols.length != first.length) {\n    \t\t// do not use lines that have not the same number of columns as the header,\n    \t\t// since it might steer us into wrong conclusions. We just pray that the\n    \t\t// first row of the file (header row) does not contain some weird number of \n    \t\t// columns that differs from all other rows.\n    \t\treturn;\n    \t}\n\t\tcols.forEach(function(col, colIndex) {\n\t\t\ttail[colIndex] = getAccumulatedType(col, tail[colIndex]);\n    \t});\n    });\n\n    all = tail.slice(0); //copy and accumulate using the first values\n    firstValues && firstValues.forEach(function(col, i) {\n    \tall[i] = getAccumulatedType(col, all[i]);\n    });\n\n    return {\n    \tfirst: first,\n    \ttail: tail,\n    \tall: all\n    };\n}\n\nfunction hasHeader(parsedSample) {\n\t// Figures out the types of data in each column. If any\n    // column is of a single type (say, integers), *except* for the first\n    // row, then the first row is presumed to be labels. If the type\n    // can't be determined, it is assumed to be a string in which case\n    // the length of the string is the determining factor: if all of the\n    // rows except for the first are the same length, it's a header.\n    // Finally, a 'vote' is taken at the end for each column, adding or\n    // subtracting from the likelihood of the first row being a header.\n \n \tvar firstValues = null;\n    var lengthsTail = [];\n\n    parsedSample && parsedSample.forEach(function(cols, i) {\n    \tif(i == 0) {\n    \t\t// This is the possible header\n    \t\tfirstValues = cols;\n    \t\tcols.forEach(function() {\n    \t\t\tlengthsTail.push([]);\n    \t\t});\n    \t\treturn;\n    \t}\n    \tif(cols.length != firstValues.length) {\n    \t\t// do not use lines that have not the same number of columns as the header,\n    \t\t// since it might steer us into wrong conclusions. We just pray that the\n    \t\t// first row of the file (header row) does not contain some weird number of \n    \t\t// columns that differs from all other rows.\n    \t\treturn;\n    \t}\n\n\t\t// Update lengths arrays for this row\n    \tcols.forEach(function(col, colIndex) {\n\t\t\tlengthsTail[colIndex].push(col.length);\n    \t});\n    });\n\n    var types = getTypes(parsedSample);\n\t// All types and lengths are known, let every col bring out a vote.\n\t// Whenever the type of the header col differs from the type of the rest of\n\t// the column (and type of first row is string), this vote is +2. Otherwise, we use the values in the\n\t// lengths array to calculate the average and the standard deviation of these\n\t// lengths. The vote then depends on how close/far it is from the \n\t// average. Close to average means negative vote, far from average means positive\n\t// vote.\n\tvar vote = 0;\n\tfirstValues && firstValues.forEach(function(col, i) {\n\t\tif(types.first[i] != types.tail[i] && types.first[i] == \"string\") {\n\t\t\t// Yup, first row has different type\n\t\t\treturn vote += 2;\n\t\t}\n\t\tvar sum = 0;\n\t\tlengthsTail[i].forEach(function(d) { sum += d; });\n\t\tvar avg = sum / lengthsTail[i].length;\n\t\tvar diffSqSum = 0;\n\t\tlengthsTail[i].forEach(function(d) { diffSqSum += ((avg - d)*(avg - d)); });\n\t\tvar sd = diffSqSum / lengthsTail[i].length;\n\n\t\t// If the header has a length that deviates a lot from the columns, we vote +1.\n\t\t// Otherwise, we vote -1\n\t\tvar tolerance = 2 * sd;\n\n\t\tif(Math.abs(col.length - avg) > tolerance) {\n\t\t\t++vote;\n\t\t} else {\n\t\t\t--vote;\n\t\t}\n\t});\n\n\t// We are done calculating stuff. Return the types that we found and whether or not\n\t// we think this sample contains a header.\n\tvar hasHeader = vote > 0;\n\treturn {\n\t\ttypes: types[hasHeader ? 'tail' : 'all'],\n\t\thasHeader: hasHeader\n\t};\n}\n\nmodule.exports = function() {\n\n\tfunction CSVSniffer(delims) {\n\t\tthis.delimiters = delims;\n\t}\n\n    // Expose the function used to accumulate the types to the outside world.\n    // Given a current type, and a value, it returns the accumulated type.\n    // For example, if the curType is integer and the curValue is 4.4, the result\n    // will be float. If curValue in this case would be a string, the result would be a string.\n    CSVSniffer.prototype.getAccumulatedType = function(curValue, curType) {\n        return getAccumulatedType(curValue, curType);\n    };\n\n\n\t// Sniff the given sample, using the given options. See documentation for exact options.\n\n\tCSVSniffer.prototype.sniff = function(sample, options) {\n\t\tif(!options) {\n\t\t\tvar options = {};\n\t\t}\n\t\tvar result = {};\n\t\tresult.warnings = [];\n\t\tresult.newlineStr = options.newlineStr || getNewlineStr(sample);\n\t\tif(!result.newlineStr) {\n\t\t\tthrow new Error(\"No newline characters found in your file...\");\n\t\t}\n\t\tresult.delimiter = options.delimiter;\n\t\tif(options.quoteChar === undefined) {\n\t\t\tresult.quoteChar = null;\n\t\t\tvar quoteAndDelim = guessQuoteAndDelimiter(sample, result.newlineStr, this.delimiters);\n\t\t\tif(quoteAndDelim.delim && (quoteAndDelim.quote == \"'\" || quoteAndDelim.quote == '\"')) {\n\t\t\t\tresult.quoteChar = quoteAndDelim.quote;\n\t\t\t\tif(options.delimiter === undefined) {\n                    // only set result.delimiter if a valid quoteChar was found\n\t\t\t\t\tresult.delimiter = quoteAndDelim.delim;\n\t\t\t\t} else if(options.delimiter !== quoteAndDelim.delim) {\n\t\t\t\t\tresult.warnings.push(\"Difference found in delimiters. User proposed \"+options.delimiter+\" but we believe it should be \"+quoteAndDelim.delim);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tresult.quoteChar = options.quoteChar;\n\t\t}\n\t\tif(!result.delimiter) {\n\t\t\tresult.delimiter = guessDelimiter(sample, result.newlineStr, this.delimiters);\n\t\t}\n\t\tvar parsedSample = parseSample(sample, result.newlineStr, result.delimiter, result.quoteChar);\n\t\tif(options.hasHeader == undefined) {\n\t\t\tvar hasHeaderData = hasHeader(parsedSample);\n\t\t\tresult.hasHeader = hasHeaderData.hasHeader;\n\t\t\tresult.types = hasHeaderData.types;\n\t\t} else {\n\t\t\tresult.hasHeader = options.hasHeader;\n\t\t\tresult.types = getTypes(parsedSample)[result.hasHeader ? 'tail' : 'all'];\n\t\t}\n\t\tresult.labels = (result.hasHeader && parsedSample.length > 0) ? parsedSample.slice(0, 1)[0] : null;\n\t\tresult.records = parsedSample;\n\t\tif(result.hasHeader && result.records.length > 0) {\n\t\t\tresult.records.shift();\n\t\t}\n\t\treturn result;\n\t}\n\treturn CSVSniffer;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/csv-sniffer/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/csv-sniffer/index.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}}],"sources":{"node_modules/csv-sniffer/index.js":"/** \n * CSV sniffer, inspired by the Python CSV library (https://docs.python.org/2/library/csv.html#csv.Sniffer)\n *\n * We implement approximately the same functionality, but we do not pack it in two seperate\n * functions (sniff and has_header) but we do everything inside the sniff function. To\n * prevent doing superfluous work, the user can instruct the sniff function what to do by providing\n * the right arguments to the function. The main reason to do this was because the has_header function\n * in Pythons CSV library makes a call to the sniff function, hence if a user wants to find out everything,\n * sniff will be called twice. Furthermore, we did not implement functionality that we did not need, \n * and we implemented some things that we did need but were not yet in the Python CSV sniffer.\n * Major differences:\n *    Our sniffer does not calculate doublequote and skipinitialwhitespace\n *    Our sniffer also retrieves the newline character as one of [\\r\\n, \\n\\r, \\n, \\r] in a clever way\n *    Our sniffer improves the performance of the delimiter guesser by not traversing every line of the\n *    input for every ASCII character, but rather traversing every line once and incrementing a corresponding\n *    counter for every encountered character.\n *\t  We implement a smarter voting mechanism in the hasHeader check. We also accept give header +1 when\n *    the length of the header column is within some tolerance depending on standard deviation of all \n *    lengths inside this column.\n *\t  Our sniffer passes back labels and records\n */\n\nfunction getNewlineStr(sample) {\n\t// Figures out what the most probable row delimiter is. \n\t// It does this by registering the line lengths that would arise if a row delimiter\n\t// would be used. If there is exactly one candidate, this candidate wins.\n\t// Otherwise, if there is exactly one candidate that causes > n lines, this one wins. This\n\t// is built in to prevent candidates with just a couple of lines challenging ones with many\n\t// lines, since if we have a candidate with 2 and a candidate with 90 lines, it seems safe\n\t// to assume the one with 90 lines always wins. Furthermore, doing statistics on very few lines\n\t// is not safe anyway. \n\t// As a last resort, we have to give a solution for when we have more than one candidate\n\t// with > n lines. We then calculate for every candidate the average and the standard\n\t// deviation of the line lengths found. The winning candidate is the one with the \n\t// smallest normalized standard deviation.\n\tvar candidates = [\"\\r\\n\", \"\\n\\r\", \"\\n\", \"\\r\"];\n\tvar nrLines = {};\n\n\tvar lineLengths = {};\n\tvar threshold = 5; // at least this many lines\n\n\tcandidates.forEach(function(newlineStr) {\n\t\tnrLines[newlineStr] = 1;\n\t\tvar l = [];\n\t\tvar curPos = 0;\n\t\twhile((newlinePos = sample.indexOf(newlineStr, curPos)) > -1) {\n\t\t\t// update nr of lines\n\t\t\t++nrLines[newlineStr];\n\n\t\t\tvar lineLength = newlinePos - curPos;\n\t\t\tl.push(lineLength);\n\t\t\tcurPos = newlinePos + newlineStr.length;\n\t\t}\n\t\tlineLengths[newlineStr] = l;\n\t});\n\n\t// eliminate substrings of \\r\\n and \\n\\r whenever they have an equal amount of lines\n\t[\"\\r\\n\", \"\\n\\r\"].forEach(function(newlineStr) {\n\t\tvar nr = nrLines[newlineStr];\n\t\tif(nr > 1) {\n\t\t\t[\"\\n\", \"\\r\"].forEach(function(newlineStr) {\n\t\t\t\tif(nrLines[newlineStr] == nr) {\n\t\t\t\t\tnrLines[newlineStr] = 1;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\t// make list of remaining candidates, which are the only ones with > 1 line\n\tvar remainingCandidates = [];\n\tcandidates.forEach(function(newlineStr) {\n\t\tif(nrLines[newlineStr] > 1) {\n\t\t\tremainingCandidates.push(newlineStr);\n\t\t}\n\t});\n\n\tif(remainingCandidates.length == 0) {\n\t\treturn null;\n\t}\n\tif(remainingCandidates.length == 1) {\n\t\treturn remainingCandidates[0];\n\t}\n\n\t// > 1 remainers, make list of valid onces, which must have a nr lines > threshold\n\tvar finalRemainers = [];\n\tvar maxNrLines = 0;\n\tremainingCandidates.forEach(function(newlineStr) {\n\t\tvar curNrLines = nrLines[newlineStr];\n\t\tmaxNrLines = Math.max(maxNrLines, curNrLines);\n\t\tif(curNrLines > threshold) {\n\t\t\tfinalRemainers.push(newlineStr);\n\t\t}\n\t});\n\n\tif(finalRemainers.length == 0) {\n\t\tvar winner = null;\n\t\t// no newlinestrs with more than 'threshold' lines... return the one with the max nr of lines\n\t\tremainingCandidates.some(function(newlineStr) {\n\t\t\tif(nrLines[newlineStr] == maxNrLines) {\n\t\t\t\twinner = newlineStr;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t\treturn winner;\n\t}\n\tif(finalRemainers.length == 1) {\n\t\treturn finalRemainers[0];\n\t}\n\n\t// Time for the final round with the > 1 remainers...\n\tvar winner = null;\n\tvar winnerScore = Infinity;\n\tfinalRemainers.forEach(function(newlineStr) {\n\t\tvar l = lineLengths[newlineStr];\n\t\tvar sum = 0;\n\t\tl.forEach(function(d) { sum += d; });\n\t\tvar avg = sum / l.length;\n\n\t\tvar absSum = 0;\n\t\tl.forEach(function(d) { absSum += Math.abs(d - avg); });\n\t\tvar score = absSum / l.length / avg; // this calculates absolute differences, normalized to # lines and length of lines\n\n\t\tif(score < winnerScore) {\n\t\t\twinnerScore = score;\n\t\t\twinner = newlineStr;\n\t\t}\n\t});\n\treturn winner;\n}\n\n\n\nfunction guessQuoteAndDelimiter(sample, newlineStr, delimiters) {\n\t// Looks for text enclosed between two identical quotes\n    // (the probable quotechar) which are preceded and followed\n    // by the same character (the probable delimiter).\n    // For example:\n    //   ,'some text',\n    // The quote with the most wins, same with the delimiter.\n    // If there is no quotechar the delimiter can't be determined\n    // this way.\n    var exprs = [];\n\n    // TODO: Consider un-consuming the delimiter after a match has been found\n\n    var nl = newlineStr.replace(\"\\n\", \"\\\\n\").replace(\"\\r\", \"\\\\r\");\n\n    // Add regexp for quotes + delimiter on both sides\n    var delimiter = \"([^\"+nl+\"\\\"'])\";\n    var content = \"[^\"+nl+\"]*?\";\n    exprs.push({\n    \texpr: new RegExp(\n\t\t    \tdelimiter\t\t\t+ // Delimiter\n\t\t    \t\"\\\\s*?\"\t\t\t\t+ // Possible whitespace between delimiter and quote char\n\t\t    \t\"([\\\"'])\"\t\t\t+ // Quote character\n\t\t    \tcontent\t\t\t\t+ // Non-greedy parsing of string between quotes\n\t\t    \t\"\\\\2\"\t\t\t\t+ // Matching quote character\n\t\t    \t\"\\\\s*?\"\t\t\t\t+ // Possible whitespace between quote char and delimiter\n\t\t    \t\"\\\\1\"\t\t\t\t  // Matching delimiter\n\t    \t, \"g\"),\n    \tdelimRef: 1,\n    \tquoteRef: 2\n\t});\n\n\t// Add regexp for quotes + delimiter on the right side\n\texprs.push({\n\t\texpr: new RegExp(\n\t\t    \t\"^\"\t\t\t\t\t+ // Start of line (note that javascript treats the start of every line as ^)\n\t\t    \t\"\\\\s*?\"\t\t\t\t+ // Possible whitespace at start of line\n\t\t    \t\"([\\\"'])\"\t\t\t+ // Quote character\n\t\t    \tcontent\t\t\t\t+ // Non-greedy parsing of string between quotes\n\t\t    \t\"\\\\1\"\t\t\t\t+ // Matching quote character\n\t\t    \t\"\\\\s*?\"\t\t\t\t+ // Possible whitespace between quote char and delimiter\n\t\t    \tdelimiter\t\t\t  // Delimiter\n\t    \t, \"g\"),\n\t\tdelimRef: 2,\n\t\tquoteRef: 1\n\t});\n\n\t// Add regexp for quotes + delimiter on the left side\n\texprs.push({\n\t\texpr: new RegExp(\n\t\t    \tdelimiter\t\t\t+ // Delimiter\n\t\t    \t\"\\\\s*?\"\t\t\t\t+ // Possible whitespace between delimiter and quote char\n\t\t    \t\"([\\\"'])\"\t\t\t+ // Quote character\n\t\t    \tcontent\t\t\t\t+ // Non-greedy parsing of string between quotes\n\t\t    \t\"\\\\2\"\t\t\t\t+ // Matching quote character\n\t\t    \t\"\\\\s*?\"\t\t\t\t+ // Possible whitespace between quote char and end of line\n\t\t    \t\"$\"\t\t\t\t\t  // End of line (note that javascript treats the end of every line as $)\n\t    \t, \"g\"),\n\t\tdelimRef: 1,\n\t\tquoteRef: 2\n\t});\n\n\t// Add regexp for just quotes\n\texprs.push({\n\t\texpr: new RegExp(\n\t\t    \t\"^\"\t\t\t\t\t+ // Start of line (note that javascript treats the start of every line as ^)\n\t\t    \t\"\\\\s*?\"\t\t\t\t+ // Possible whitespace at start of line\n\t\t    \t\"([\\\"'])\"\t\t\t+ // Quote character\n\t\t    \tcontent\t\t\t\t+ // Non-greedy parsing of string between quotes\n\t\t    \t\"\\\\1\"\t\t\t\t+ // Matching quote character\n\t\t    \t\"\\\\s*?\"\t\t\t\t+ // Possible whitespace between quote char and end of line\n\t\t    \t\"$\"\t\t\t\t\t  // End of line (note that javascript treats the end of every line as $)\n\t    \t, \"g\"),\n\t\tquoteRef: 1\n\t});\n\n\tvar matches = [];\n\n\texprs.every(function(d) { // use every here, so we can stop the loop by returning false\n\t\tvar matchesNew;\n\t\twhile(matchesNew = d.expr.exec(sample)) {\n\t\t\tvar match = {};\n\t\t\tif(d.delimRef && matchesNew[d.delimRef]) match.delim = matchesNew[d.delimRef];\n\t\t\tif(d.quoteRef && matchesNew[d.quoteRef]) match.quote = matchesNew[d.quoteRef];\n\t\t\tmatches.push(match);\n\t\t}\n\n\t\treturn matches.length == 0; // only go to next regexp if matches is still empty\n\t});\n\tif(matches.length == 0) {\n\t\treturn { delim: null, quote: null };\n\t}\n\n\tvar delimCounters = {};\n\tvar quoteCounters = {};\n\n\tmatches.forEach(function(d) {\n\t\tif(d.hasOwnProperty(\"delim\") && (!delimiters || delimiters.indexOf(d.delim) > -1)) {\n\t\t\tif(!delimCounters.hasOwnProperty(d.delim)) \tdelimCounters[d.delim] = 1;\n\t\t\telse\t \t\t\t\t\t\t\t\t\t++delimCounters[d.delim];\n\t\t}\n\t\tif(d.hasOwnProperty(\"quote\")) {\n\t\t\tif(!quoteCounters.hasOwnProperty(d.quote)) \tquoteCounters[d.quote] = 1;\n\t\t\telse\t\t\t\t\t\t\t\t\t\t++quoteCounters[d.quote];\n\t\t}\n\t});\n\n\tvar delims = Object.keys(delimCounters);\n\tvar quotes = Object.keys(quoteCounters);\n\n\tvar delim = null;\n\tif(delims.length > 0) {\n\t\tvar maxCount = -1;\n\t\tdelims.forEach(function(d) { \n\t\t\tif(delimCounters[d] > maxCount) {\n\t\t\t\tdelim = d;\n\t\t\t\tmaxCount = delimCounters[d];\n\t\t\t}\n\t\t});\n\t}\n\n\tvar maxCount = -1;\n\tquotes.forEach(function(d) {\n\t\tif(quoteCounters[d] > maxCount) {\n\t\t\tquote = d;\n\t\t\tmaxCount = quoteCounters[d];\n\t\t}\n\t});\n\n\tif(delim == \"\\n\") {\n\t\t// This is probably a one column file...\n\t\tdelim = null;\n\t}\n\n\treturn {\n\t\tdelim: delim,\n\t\tquote: quote\n\t}\n}\n\nfunction guessDelimiter(sample, newlineStr, delimiters) {\n\t// The delimiter /should/ occur the same number of times on\n    // each row. However, due to malformed data, it may not. We don't want\n    // an all or nothing approach, so we allow for small variations in this\n    // number.\n    //   1) build a table of the frequency of each character on every line.\n    //   2) build a table of frequencies of this frequency (meta-frequency?),\n    //      e.g.  'x occurred 5 times in 10 rows, 6 times in 1000 rows,\n    //      7 times in 2 rows'\n    //   3) use the mode of the meta-frequency to determine the /expected/\n    //      frequency for that character\n    //   4) find out how often the character actually meets that goal\n    //   5) the character that best meets its goal is the delimiter\n\n\t// define a range in which to search for ASCII characters\n\tvar startAsciiAt = 0;\n\tvar asciiMax = 127;\n\n\tvar asciiTables = [];\n\n\tvar curCharIndex = 0;\n\tvar nrLines = 0;\n\tvar newlinePos;\n\twhile((newlinePos = sample.indexOf(newlineStr, curCharIndex)) > -1) {\n\t\t// for every line, we build an ascii table that keeps the number of occurrences\n\t\tvar ascii = [];\n\t\tfor(var i=0; i<asciiMax-startAsciiAt; ++i) {\n\t\t\tascii.push(0); // all chars start with 0\n\t\t}\n\t\twhile(curCharIndex < newlinePos) {\n\t\t\t++ascii[sample.charCodeAt(curCharIndex)-startAsciiAt];\n\t\t\t++curCharIndex;\n\t\t}\n\t\t// skip over the newline string\n\t\tcurCharIndex += newlineStr.length;\n\n\t\t// and add this ascii table to the ascii tables array\n\t\tasciiTables.push(ascii);\n\t\t++nrLines;\n\t}\n\tif(nrLines == 0) {\n\t\treturn null;\n\t}\n\n\t// now transform the ascii tables into a 'frequency of frequency' (meta-frequency) table\n\tvar freqTables = [];\n\tfor(var i=0; i<asciiMax-startAsciiAt; ++i) {\n\t\t// for every character, we build a frequencytable\n\t\tvar freqTable = [];\n\t\tasciiTables.forEach(function(d) {\n\t\t\tif(!freqTable[d[i]]) freqTable[d[i]] =  1;\n\t\t\telse \t\t\t\t freqTable[d[i]] += 1;\n\t\t});\n\t\tfreqTables[i] = freqTable;\n\t}\n\n\t// using this meta-frequency table, we calculate the so called character 'modes', defined \n\t// for every character as the max frequency of occurences minus the sum of all other\n\t// frequencies of occurences\n\tvar modes = [];\n\tfor(var i=0; i<asciiMax-startAsciiAt; ++i) {\n\t\tvar keys = Object.keys(freqTables[i]);\n\t\tif(keys.length == 1 && keys[0] == 0) {\n\t\t\t//This character never occurs on any line\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\t// if we arrived here, we are sure that the character occurs at least once somewhere\n\n\t\t//calculate max meta frequency, and also remember the corresponding frequency\n\t\tvar max = { freq: null, metaFreq: -Infinity };\n\t\tfreqTables[i].forEach(function(metaFreq, freq) {\n\t\t\tif(metaFreq > max.metaFreq) {\n\t\t\t\tmax.freq = freq;\n\t\t\t\tmax.metaFreq = metaFreq;\n\t\t\t}\n\t\t});\n\n\t\t// calculate sum of frequencies\n\t\tvar sum = 0;\n\t\tfreqTables[i].forEach(function(d) {\n\t\t\tsum += d;\n\t\t});\n\n\t\t// we can now calculate the mode for this character\n\t\tmodes[i] = { maxFreq: max.freq, mode: max.metaFreq - (sum - max.metaFreq) }; // Equals 2max - sum\n\t}\n\n\t// We now have a mode for each character, which tells us something about the number of\n\t// meta frequencies. The higher the mode is for a character, the more likely it is that\n\t// this character is a delimiter. In the perfect case, a character occurs exactly the same\n\t// times on every line, yielding a mode that equals the number of lines.\n\t// To find the best candidates for delimiters (the ones closest to the number of lines), we\n\t// start with a consistency value of 1 and we decrease this by 0.01 every time we do not\n\t// find at least one delimiter.\n\tvar delims = [];\n\tvar consistency = 1.0;\n\tvar threshold = 0.8; // when this value is reached without finding a candidate for a delimiter, we give up...\n\tvar decreaseStep = 0.01;\n\twhile(delims.length == 0 && consistency > threshold) {\n\t\tmodes.forEach(function(d, i) {\n\t\t\tif(d.maxFreq == 0 || d.mode <= 0) return;\n\t\t\tvar delim = String.fromCharCode(i+startAsciiAt);\n\t\t\tif((d.mode / nrLines) >= consistency && (!delimiters || delimiters.indexOf(delim) > -1)) {\n\t\t\t\tdelims.push(delim);\n\t\t\t}\n\t\t});\n\t\tconsistency -= decreaseStep;\n\t}\n\n\tif(delims.length == 0) {\n\t\treturn null;\n\t}\n\n\tif(delims.length == 1) {\n\t\treturn delims[0];\n\t}\n\n\t// We have > 1 delimiter; use a list of known delimiters\n\t[\",\", \"\\t\", \";\", \" \", \":\", \"|\"].forEach(function(d) {\n\t\tif(delims.indexOf(d) > -1) {\n\t\t\treturn d;\n\t\t}\n\t});\n\n\t// We still found no apparent winner... just return the first one\n\treturn delims[0];\n}\n\nfunction parseSample(sample, newlineStr, delimiter, quotechar) {\n\t// Parse sample by creating a state machine to split lines (necessary because\n\t// we don't want to split a line if we find a newline str inside a quoted field)\n\t// Assumption of this function is that the quotechar is not contained inside the\n\t// newlineStr. This would probably devastate the parsing, but is a safe assumption\n\t// since it must be a really f*cked up format if the newline string contains the\n\t// quotechar.\n\tvar lines = [];\n\tif(!quotechar) {\n\t\t// no quote char, simple!\n\t\tlines = sample.split(newlineStr);\n\t\tif(lines.length > 1) {\n\t\t\tlines.pop(); //drop last element, since that can be an incomplete line\n\t\t}\n\t\treturn lines.map(function(line) { return line.split(delimiter); });\n\t}\n\n\t// if we arrived here, it means the real deal: a quote char needs to be considered\n\tvar result = [];\n\tvar vals = [];\n    var curVal = \"\";\n    var insideQuotes = false;\n    var escape = false;\n    for(var i=0; i<sample.length; ++i) {\n    \tvar curchar = sample.charAt(i);\n    \tif(!escape) {\n    \t\t// only do all of the checks if curchar is not escaped\n\t    \tif(curchar == \"\\\\\") {\n\t    \t\tescape = true;\n\t    \t\tcontinue;\n\t    \t}\n\t    \tif(curchar == quotechar) {\n\t    \t\tinsideQuotes = !insideQuotes;\n\t    \t\tcontinue;\n\t    \t}\n\n\t    \tif(!insideQuotes) {\n\t    \t\t// check if we are currently standing at a newline\n\t\t\t\tvar atNewline = true;\n\t\t\t\tfor(var j=0; j<newlineStr.length; ++j) {\n\t\t\t\t\tif(sample.charAt(i+j) != newlineStr.charAt(j)) {\n\t\t\t\t\t\tatNewline = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(atNewline || curchar == delimiter) {\n\t\t\t\t\tvals.push(curVal);\n\t\t\t\t\tcurVal = \"\";\n\t\t\t\t\tif(atNewline) {\n\t\t\t\t\t\tif(vals[vals.length-1] == \"\") { // remove last item if it is completely empty\n\t\t\t\t\t\t\tvals.pop();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult.push(vals);\n\t\t\t\t\t\tvals = [];\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t    \t}\n    \t}\n    \tescape = false;\n    \tcurVal += curchar;\n    }\n    // after the loop, remaints might be in the vals array. We leave them there, since it is not considered\n    // a complete line if no newline was read after it\n    return result;\n}\n\nfunction getAccumulatedType(curValue, curType) {\n    // Note: If curType is \"integer\", this function will return the actual type of\n    // curValue\n    if(curType == \"string\") return \"string\"; //can't get worse than string\n\n    // see if we should fall back to string by seeing if this is a finite number\n    if(!isFinite(curValue)) return \"string\";\n\n    // see if we should fall back from int to float\n    if(curType == \"float\" || curValue%1 !== 0) return \"float\";\n\n    return \"integer\";\n}\n\nfunction getTypes(parsedSample) {\n\t// Parses all lines in the lines array and determines the type of all the columns.\n\t// Returns three type arrays:\n\t// - Types considering all rows\n\t// - Types considering all but the first row\n\t// - Types considering only the first row\n\n    var firstValues = null; // used to calculate the all array in the end\n    var first = [];\n    var tail = [];\n    var all = null; // will be calculated in the end\n\n    parsedSample && parsedSample.forEach(function(cols, i) {\n    \tif(i == 0) {\n    \t\tfirstValues = cols;\n    \t\tcols.forEach(function(col) {\n    \t\t\tfirst.push(getAccumulatedType(col, \"integer\"));\n    \t\t\ttail.push(\"integer\");\n    \t\t});\n    \t\treturn;\n    \t}\n    \tif(cols.length != first.length) {\n    \t\t// do not use lines that have not the same number of columns as the header,\n    \t\t// since it might steer us into wrong conclusions. We just pray that the\n    \t\t// first row of the file (header row) does not contain some weird number of \n    \t\t// columns that differs from all other rows.\n    \t\treturn;\n    \t}\n\t\tcols.forEach(function(col, colIndex) {\n\t\t\ttail[colIndex] = getAccumulatedType(col, tail[colIndex]);\n    \t});\n    });\n\n    all = tail.slice(0); //copy and accumulate using the first values\n    firstValues && firstValues.forEach(function(col, i) {\n    \tall[i] = getAccumulatedType(col, all[i]);\n    });\n\n    return {\n    \tfirst: first,\n    \ttail: tail,\n    \tall: all\n    };\n}\n\nfunction hasHeader(parsedSample) {\n\t// Figures out the types of data in each column. If any\n    // column is of a single type (say, integers), *except* for the first\n    // row, then the first row is presumed to be labels. If the type\n    // can't be determined, it is assumed to be a string in which case\n    // the length of the string is the determining factor: if all of the\n    // rows except for the first are the same length, it's a header.\n    // Finally, a 'vote' is taken at the end for each column, adding or\n    // subtracting from the likelihood of the first row being a header.\n \n \tvar firstValues = null;\n    var lengthsTail = [];\n\n    parsedSample && parsedSample.forEach(function(cols, i) {\n    \tif(i == 0) {\n    \t\t// This is the possible header\n    \t\tfirstValues = cols;\n    \t\tcols.forEach(function() {\n    \t\t\tlengthsTail.push([]);\n    \t\t});\n    \t\treturn;\n    \t}\n    \tif(cols.length != firstValues.length) {\n    \t\t// do not use lines that have not the same number of columns as the header,\n    \t\t// since it might steer us into wrong conclusions. We just pray that the\n    \t\t// first row of the file (header row) does not contain some weird number of \n    \t\t// columns that differs from all other rows.\n    \t\treturn;\n    \t}\n\n\t\t// Update lengths arrays for this row\n    \tcols.forEach(function(col, colIndex) {\n\t\t\tlengthsTail[colIndex].push(col.length);\n    \t});\n    });\n\n    var types = getTypes(parsedSample);\n\t// All types and lengths are known, let every col bring out a vote.\n\t// Whenever the type of the header col differs from the type of the rest of\n\t// the column (and type of first row is string), this vote is +2. Otherwise, we use the values in the\n\t// lengths array to calculate the average and the standard deviation of these\n\t// lengths. The vote then depends on how close/far it is from the \n\t// average. Close to average means negative vote, far from average means positive\n\t// vote.\n\tvar vote = 0;\n\tfirstValues && firstValues.forEach(function(col, i) {\n\t\tif(types.first[i] != types.tail[i] && types.first[i] == \"string\") {\n\t\t\t// Yup, first row has different type\n\t\t\treturn vote += 2;\n\t\t}\n\t\tvar sum = 0;\n\t\tlengthsTail[i].forEach(function(d) { sum += d; });\n\t\tvar avg = sum / lengthsTail[i].length;\n\t\tvar diffSqSum = 0;\n\t\tlengthsTail[i].forEach(function(d) { diffSqSum += ((avg - d)*(avg - d)); });\n\t\tvar sd = diffSqSum / lengthsTail[i].length;\n\n\t\t// If the header has a length that deviates a lot from the columns, we vote +1.\n\t\t// Otherwise, we vote -1\n\t\tvar tolerance = 2 * sd;\n\n\t\tif(Math.abs(col.length - avg) > tolerance) {\n\t\t\t++vote;\n\t\t} else {\n\t\t\t--vote;\n\t\t}\n\t});\n\n\t// We are done calculating stuff. Return the types that we found and whether or not\n\t// we think this sample contains a header.\n\tvar hasHeader = vote > 0;\n\treturn {\n\t\ttypes: types[hasHeader ? 'tail' : 'all'],\n\t\thasHeader: hasHeader\n\t};\n}\n\nmodule.exports = function() {\n\n\tfunction CSVSniffer(delims) {\n\t\tthis.delimiters = delims;\n\t}\n\n    // Expose the function used to accumulate the types to the outside world.\n    // Given a current type, and a value, it returns the accumulated type.\n    // For example, if the curType is integer and the curValue is 4.4, the result\n    // will be float. If curValue in this case would be a string, the result would be a string.\n    CSVSniffer.prototype.getAccumulatedType = function(curValue, curType) {\n        return getAccumulatedType(curValue, curType);\n    };\n\n\n\t// Sniff the given sample, using the given options. See documentation for exact options.\n\n\tCSVSniffer.prototype.sniff = function(sample, options) {\n\t\tif(!options) {\n\t\t\tvar options = {};\n\t\t}\n\t\tvar result = {};\n\t\tresult.warnings = [];\n\t\tresult.newlineStr = options.newlineStr || getNewlineStr(sample);\n\t\tif(!result.newlineStr) {\n\t\t\tthrow new Error(\"No newline characters found in your file...\");\n\t\t}\n\t\tresult.delimiter = options.delimiter;\n\t\tif(options.quoteChar === undefined) {\n\t\t\tresult.quoteChar = null;\n\t\t\tvar quoteAndDelim = guessQuoteAndDelimiter(sample, result.newlineStr, this.delimiters);\n\t\t\tif(quoteAndDelim.delim && (quoteAndDelim.quote == \"'\" || quoteAndDelim.quote == '\"')) {\n\t\t\t\tresult.quoteChar = quoteAndDelim.quote;\n\t\t\t\tif(options.delimiter === undefined) {\n                    // only set result.delimiter if a valid quoteChar was found\n\t\t\t\t\tresult.delimiter = quoteAndDelim.delim;\n\t\t\t\t} else if(options.delimiter !== quoteAndDelim.delim) {\n\t\t\t\t\tresult.warnings.push(\"Difference found in delimiters. User proposed \"+options.delimiter+\" but we believe it should be \"+quoteAndDelim.delim);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tresult.quoteChar = options.quoteChar;\n\t\t}\n\t\tif(!result.delimiter) {\n\t\t\tresult.delimiter = guessDelimiter(sample, result.newlineStr, this.delimiters);\n\t\t}\n\t\tvar parsedSample = parseSample(sample, result.newlineStr, result.delimiter, result.quoteChar);\n\t\tif(options.hasHeader == undefined) {\n\t\t\tvar hasHeaderData = hasHeader(parsedSample);\n\t\t\tresult.hasHeader = hasHeaderData.hasHeader;\n\t\t\tresult.types = hasHeaderData.types;\n\t\t} else {\n\t\t\tresult.hasHeader = options.hasHeader;\n\t\t\tresult.types = getTypes(parsedSample)[result.hasHeader ? 'tail' : 'all'];\n\t\t}\n\t\tresult.labels = (result.hasHeader && parsedSample.length > 0) ? parsedSample.slice(0, 1)[0] : null;\n\t\tresult.records = parsedSample;\n\t\tif(result.hasHeader && result.records.length > 0) {\n\t\t\tresult.records.shift();\n\t\t}\n\t\treturn result;\n\t}\n\treturn CSVSniffer;\n};\n"},"lineCount":670}},"error":null,"hash":"637cb5d577230ffd66a5e0757563f380","cacheData":{"env":{}}}