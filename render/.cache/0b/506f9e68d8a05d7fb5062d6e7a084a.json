{"id":"node_modules/stream-to-async-iterator/stream-to-async-iterator.js","dependencies":[{"name":"/home/tiago/works/iat_backend/node_modules/stream-to-async-iterator/stream-to-async-iterator.js.map","includedInParent":true,"mtime":1486335716000},{"name":"/home/tiago/works/iat_backend/package.json","includedInParent":true,"mtime":1577388715061},{"name":"/home/tiago/works/iat_backend/node_modules/stream-to-async-iterator/package.json","includedInParent":true,"mtime":1577388714725}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @type {Object.<string, Symbol>}\n */\nvar states = exports.states = {\n    notReadable: Symbol('not readable'),\n    readable: Symbol('readable'),\n    ended: Symbol('ended'),\n    errored: Symbol('errored')\n};\n\n/**\n * @typedef {Object} StreamAsyncToIterator~Options\n * @property {number} [size] - the size of each read from the stream for each iteration\n */\n\n\n/**\n * @typedef {Object} StreamAsyncToIterator~Iteration\n * @property {boolean} done\n * @property {*} value\n */\n\n/**\n * Wraps a stream into an object that can be used as an async iterator.\n *\n * This will keep a stream in a paused state, and will only read from the stream on each\n * iteration. A size can be supplied to set an explicit call to `stream.read([size])` in\n * the options for each iteration.\n */\nvar StreamAsyncToIterator = function () {\n    /**\n     * @param {Readable} stream\n     * @param {StreamAsyncToIterator~Options} [options]\n     */\n    function StreamAsyncToIterator(stream) {\n        var _this = this;\n\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        _classCallCheck(this, StreamAsyncToIterator);\n\n        /**\n         * The underlying readable stream\n         * @private\n         * @type {Readable}\n         */\n        this._stream = stream;\n\n        /**\n         * Contains stream's error when stream has error'ed out\n         * @private\n         * @type {?Error}\n         */\n        this._error = null;\n\n        /**\n         * The current state of the iterator (not readable, readable, ended, errored)\n         * @private\n         * @type {Symbol}\n         */\n        this._state = states.notReadable;\n\n        /**\n         * @private\n         * @type {?number}\n         */\n        this._size = options.size;\n\n        /**\n         * The rejections of promises to call when stream errors out\n         * @private\n         * @type {Set.<function(err: Error)>}\n         */\n        this._rejections = new Set();\n\n        var handleStreamError = function handleStreamError(err) {\n            _this._error = err;\n            _this._state = states.errored;\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = _this._rejections[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var reject = _step.value;\n\n                    reject(err);\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        };\n\n        var handleStreamEnd = function handleStreamEnd() {\n            _this._state = states.ended;\n        };\n\n        stream.once('error', handleStreamError);\n        stream.once('end', handleStreamEnd);\n    }\n\n    _createClass(StreamAsyncToIterator, [{\n        key: 'next',\n\n\n        /**\n         * Returns the next iteration of data. Rejects if the stream errored out.\n         * @returns {Promise<StreamAsyncToIterator~Iteration>}\n         */\n        value: function () {\n            var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {\n                var data;\n                return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                if (!(this._state === states.notReadable)) {\n                                    _context.next = 6;\n                                    break;\n                                }\n\n                                _context.next = 3;\n                                return Promise.race([this._untilReadable(), this._untilEnd()]);\n\n                            case 3:\n                                return _context.abrupt('return', this.next());\n\n                            case 6:\n                                if (!(this._state === states.ended)) {\n                                    _context.next = 10;\n                                    break;\n                                }\n\n                                return _context.abrupt('return', { done: true, value: null });\n\n                            case 10:\n                                if (!(this._state === states.errored)) {\n                                    _context.next = 14;\n                                    break;\n                                }\n\n                                throw this._error;\n\n                            case 14:\n                                //stream.read returns null if not readable or when stream has ended\n\n                                data = this._size ? this._stream.read(this._size) : this._stream.read();\n\n                                if (!(data !== null)) {\n                                    _context.next = 19;\n                                    break;\n                                }\n\n                                return _context.abrupt('return', { done: false, value: data });\n\n                            case 19:\n                                //we're no longer readable, need to find out what state we're in\n                                this._state = states.notReadable;\n                                return _context.abrupt('return', this.next());\n\n                            case 21:\n                            case 'end':\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, this);\n            }));\n\n            function next() {\n                return _ref.apply(this, arguments);\n            }\n\n            return next;\n        }()\n\n        /**\n         * Waits until the stream is readable. Rejects if the stream errored out.\n         * @private\n         * @returns {Promise}\n         */\n\n    }, {\n        key: '_untilReadable',\n        value: function _untilReadable() {\n            var _this2 = this;\n\n            return new Promise(function (resolve, reject) {\n                var handleReadable = function handleReadable() {\n                    _this2._state = states.readable;\n                    _this2._rejections.delete(reject);\n                    resolve();\n                };\n\n                _this2._stream.once('readable', handleReadable);\n                _this2._rejections.add(reject);\n            });\n        }\n\n        /**\n         * Waits until the stream is ended. Rejects if the stream errored out.\n         * @private\n         * @returns {Promise}\n         */\n\n    }, {\n        key: '_untilEnd',\n        value: function _untilEnd() {\n            var _this3 = this;\n\n            return new Promise(function (resolve, reject) {\n                var handleEnd = function handleEnd() {\n                    _this3._state = states.ended;\n                    _this3._rejections.delete(reject);\n                    resolve();\n                };\n                _this3._stream.once('end', handleEnd);\n                _this3._rejections.add(reject);\n            });\n        }\n    }]);\n\n    return StreamAsyncToIterator;\n}();\n\nexports.default = StreamAsyncToIterator;\n\n\nObject.defineProperty(StreamAsyncToIterator.prototype, Symbol.asyncIterator, {\n    configurable: true,\n    value: function value() {\n        return this;\n    }\n});\n\n"},"sourceMaps":{"js":{"version":3,"sources":["../lib/stream-to-async-iterator.js"],"names":[],"mappings":"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","file":"stream-to-async-iterator.js","sourcesContent":["// @flow\nimport type {Readable} from 'stream';\n\n/**\n * @type {Object.<string, Symbol>}\n */\nexport const states = {\n    notReadable: Symbol('not readable'),\n    readable: Symbol('readable'),\n    ended: Symbol('ended'),\n    errored: Symbol('errored'),\n};\n\n/**\n * @typedef {Object} StreamAsyncToIterator~Options\n * @property {number} [size] - the size of each read from the stream for each iteration\n */\ntype StreamAsyncToIteratorOptions = {\n    size?: number;\n}\n\n/**\n * @typedef {Object} StreamAsyncToIterator~Iteration\n * @property {boolean} done\n * @property {*} value\n */\ntype Iteration = {\n    done: boolean;\n    value: any;\n}\n\ntype Reject = (err: any) => void;\n\n/**\n * Wraps a stream into an object that can be used as an async iterator.\n *\n * This will keep a stream in a paused state, and will only read from the stream on each\n * iteration. A size can be supplied to set an explicit call to `stream.read([size])` in\n * the options for each iteration.\n */\nexport default class StreamAsyncToIterator {\n    /**\n     * @param {Readable} stream\n     * @param {StreamAsyncToIterator~Options} [options]\n     */\n    constructor(stream: Readable, options: StreamAsyncToIteratorOptions={}) {\n        /**\n         * The underlying readable stream\n         * @private\n         * @type {Readable}\n         */\n        this._stream = stream;\n\n        /**\n         * Contains stream's error when stream has error'ed out\n         * @private\n         * @type {?Error}\n         */\n        this._error = null;\n\n        /**\n         * The current state of the iterator (not readable, readable, ended, errored)\n         * @private\n         * @type {Symbol}\n         */\n        this._state = states.notReadable;\n\n        /**\n         * @private\n         * @type {?number}\n         */\n        this._size = options.size;\n\n        /**\n         * The rejections of promises to call when stream errors out\n         * @private\n         * @type {Set.<function(err: Error)>}\n         */\n        this._rejections = new Set();\n\n        const handleStreamError = (err) => {\n            this._error = err;\n            this._state = states.errored;\n            for (const reject of this._rejections) {\n                reject(err);\n            }\n        };\n\n        const handleStreamEnd = () => {\n            this._state = states.ended;\n        };\n\n        stream.once('error', handleStreamError);\n        stream.once('end', handleStreamEnd);\n    }\n\n    _stream: Readable;\n    _error: ?Error;\n    _state: Symbol;\n    _size: ?number;\n    _rejections: Set<Reject>;\n\n    /**\n     * Returns the next iteration of data. Rejects if the stream errored out.\n     * @returns {Promise<StreamAsyncToIterator~Iteration>}\n     */\n    async next(): Promise<Iteration> {\n        if (this._state === states.notReadable) {\n            //need to wait until the stream is readable or ended\n            await Promise.race([this._untilReadable(), this._untilEnd()]);\n            return this.next();\n        } else if (this._state === states.ended) {\n            return {done: true, value: null};\n        } else if (this._state === states.errored) {\n            throw this._error;\n        } else /* readable */ {\n            //stream.read returns null if not readable or when stream has ended\n\n            const data = this._size ? this._stream.read(this._size) : this._stream.read();\n\n            if (data !== null) {\n                return {done: false, value: data};\n            } else {\n                //we're no longer readable, need to find out what state we're in\n                this._state = states.notReadable;\n                return this.next();\n            }\n        }\n    }\n\n    /**\n     * Waits until the stream is readable. Rejects if the stream errored out.\n     * @private\n     * @returns {Promise}\n     */\n    _untilReadable(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const handleReadable = () => {\n                this._state = states.readable;\n                this._rejections.delete(reject);\n                resolve();\n            };\n\n            this._stream.once('readable', handleReadable);\n            this._rejections.add(reject);\n        });\n    }\n\n    /**\n     * Waits until the stream is ended. Rejects if the stream errored out.\n     * @private\n     * @returns {Promise}\n     */\n    _untilEnd(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const handleEnd = () => {\n                this._state = states.ended;\n                this._rejections.delete(reject);\n                resolve();\n            };\n            this._stream.once('end', handleEnd);\n            this._rejections.add(reject);\n        })\n    }\n}\n\nObject.defineProperty(StreamAsyncToIterator.prototype, (Symbol: any).asyncIterator, {\n    configurable: true,\n    value: function() {return this;}\n});\n"]}},"error":null,"hash":"8c172828e54e4d89682441300170cd10","cacheData":{"env":{}}}