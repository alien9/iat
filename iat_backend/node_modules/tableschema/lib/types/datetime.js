'use strict';

var moment = require('moment');
var isDate = require('lodash/isDate');
var isString = require('lodash/isString');

var _require = require('d3-time-format'),
    timeParse = _require.timeParse;

var _require2 = require('../config'),
    ERROR = _require2.ERROR;

// Module API

function castDatetime(format, value) {
  if (!isDate(value)) {
    if (!isString(value)) {
      return ERROR;
    }
    try {
      if (format === 'default') {
        value = moment(value, _DEFAULT_PATTERN, true);
      } else if (format === 'any') {
        value = moment(value);
      } else {
        if (format.startsWith('fmt:')) {
          console.warn('Format "fmt:<PATTERN>" is deprecated.\n             Please use "<PATTERN>" without "fmt:" prefix.');
          format = format.replace('fmt:', '');
        }
        // https://github.com/d3/d3-time-format/issues/47
        // It doesn't raise any error if the value is out-of-range
        value = moment(timeParse(format)(value));
      }
      if (!value.isValid()) {
        return ERROR;
      }
      value = value.toDate();
    } catch (error) {
      return ERROR;
    }
  }
  return value;
}

module.exports = {
  castDatetime: castDatetime

  // Internal

};var _DEFAULT_PATTERN = 'YYYY-MM-DDTHH:mm:ss[Z]';