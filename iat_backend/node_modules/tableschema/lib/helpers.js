'use strict';

// Retrieve descriptor

var retrieveDescriptor = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(descriptor) {
    var res;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!isPlainObject(descriptor)) {
              _context.next = 4;
              break;
            }

            descriptor = cloneDeep(descriptor);

            // Remote
            _context.next = 24;
            break;

          case 4:
            if (!isRemotePath(descriptor)) {
              _context.next = 13;
              break;
            }

            _context.next = 7;
            return axios.get(descriptor);

          case 7:
            res = _context.sent;

            descriptor = res.data;

            // Loading error

            if (!(res.status >= 400)) {
              _context.next = 11;
              break;
            }

            throw new TableSchemaError('Can\'t load descriptor at "' + descriptor + '"');

          case 11:
            _context.next = 24;
            break;

          case 13:
            if (!config.IS_BROWSER) {
              _context.next = 15;
              break;
            }

            throw new TableSchemaError('Local paths are not supported in browser');

          case 15:
            _context.prev = 15;
            _context.next = 18;
            return new Promise(function (resolve, reject) {
              fs.readFile(descriptor, 'utf-8', function (error, data) {
                if (error) reject(error);
                try {
                  resolve(JSON.parse(data));
                } catch (error) {
                  reject(error);
                }
              });
            });

          case 18:
            descriptor = _context.sent;
            _context.next = 24;
            break;

          case 21:
            _context.prev = 21;
            _context.t0 = _context['catch'](15);
            throw new TableSchemaError('Can\'t load descriptor at "' + descriptor + '"');

          case 24:
            return _context.abrupt('return', descriptor);

          case 25:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[15, 21]]);
  }));

  return function retrieveDescriptor(_x) {
    return _ref.apply(this, arguments);
  };
}();

// Expand descriptor

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var fs = require('fs');
var axios = require('axios');
var cloneDeep = require('lodash/cloneDeep');
var isPlainObject = require('lodash/isPlainObject');

var _require = require('./errors'),
    TableSchemaError = _require.TableSchemaError;

var config = require('./config');function expandSchemaDescriptor(descriptor) {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (descriptor.fields || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var field = _step.value;

      expandFieldDescriptor(field);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (!descriptor.missingValues) descriptor.missingValues = config.DEFAULT_MISSING_VALUES;
  return descriptor;
}

function expandFieldDescriptor(descriptor) {
  if (descriptor instanceof Object) {
    if (!descriptor.type) descriptor.type = config.DEFAULT_FIELD_TYPE;
    if (!descriptor.format) descriptor.format = config.DEFAULT_FIELD_FORMAT;
  }
  return descriptor;
}

// Miscellaneous

function isRemotePath(path) {
  // TODO: improve implementation
  return path.startsWith('http');
}

// System

module.exports = {
  retrieveDescriptor: retrieveDescriptor,
  expandSchemaDescriptor: expandSchemaDescriptor,
  expandFieldDescriptor: expandFieldDescriptor,
  isRemotePath: isRemotePath
};