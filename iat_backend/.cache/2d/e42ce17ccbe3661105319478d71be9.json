{"id":"node_modules/data.js/lib/parser/csv.js","dependencies":[{"name":"/home/tiago/works/iat_backend/package.json","includedInParent":true,"mtime":1582375201195},{"name":"/home/tiago/works/iat_backend/node_modules/data.js/package.json","includedInParent":true,"mtime":1577388714717},{"name":"core-js/modules/es6.regexp.split","loc":{"line":3,"column":8},"parent":"/home/tiago/works/iat_backend/node_modules/data.js/lib/parser/csv.js","resolved":"/home/tiago/works/iat_backend/node_modules/core-js/modules/es6.regexp.split.js"},{"name":"core-js/modules/es6.regexp.to-string","loc":{"line":5,"column":8},"parent":"/home/tiago/works/iat_backend/node_modules/data.js/lib/parser/csv.js","resolved":"/home/tiago/works/iat_backend/node_modules/core-js/modules/es6.regexp.to-string.js"},{"name":"core-js/modules/es6.regexp.replace","loc":{"line":7,"column":8},"parent":"/home/tiago/works/iat_backend/node_modules/data.js/lib/parser/csv.js","resolved":"/home/tiago/works/iat_backend/node_modules/core-js/modules/es6.regexp.replace.js"},{"name":"stream","loc":{"line":9,"column":25},"parent":"/home/tiago/works/iat_backend/node_modules/data.js/lib/parser/csv.js","resolved":"/home/tiago/works/iat_backend/node_modules/stream-browserify/index.js"},{"name":"csv-parse","loc":{"line":11,"column":22},"parent":"/home/tiago/works/iat_backend/node_modules/data.js/lib/parser/csv.js","resolved":"/home/tiago/works/iat_backend/node_modules/csv-parse/lib/index.js"},{"name":"csv-sniffer","loc":{"line":13,"column":27},"parent":"/home/tiago/works/iat_backend/node_modules/data.js/lib/parser/csv.js","resolved":"/home/tiago/works/iat_backend/node_modules/csv-sniffer/index.js"},{"name":"stream-to-string","loc":{"line":15,"column":25},"parent":"/home/tiago/works/iat_backend/node_modules/data.js/lib/parser/csv.js","resolved":"/home/tiago/works/iat_backend/node_modules/stream-to-string/index.js"},{"name":"iconv-lite","loc":{"line":17,"column":22},"parent":"/home/tiago/works/iat_backend/node_modules/data.js/lib/parser/csv.js","resolved":"/home/tiago/works/iat_backend/node_modules/iconv-lite/lib/index.js"}],"generated":{"js":"\"use strict\";\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nconst Readable = require('stream').Readable;\n\nconst parse = require('csv-parse');\n\nconst CSVSniffer = require('csv-sniffer')();\n\nconst toString = require('stream-to-string');\n\nconst iconv = require('iconv-lite');\n\nconst csvParser = async function csvParser(file) {\n  let {\n    keyed = false,\n    size = 0\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const parseOptions = await getParseOptions(file, keyed);\n  let stream = await file.stream({\n    size\n  });\n\n  if (file.descriptor.encoding.toLowerCase().replace('-', '') === 'utf8') {\n    return stream.pipe(parse(parseOptions));\n  } else {\n    // non utf-8 files are decoded by iconv-lite module\n    return stream.pipe(iconv.decodeStream(file.descriptor.encoding)).pipe(parse(parseOptions));\n  }\n};\n\nconst guessParseOptions = async file => {\n  const possibleDelimiters = [',', ';', ':', '|', '\\t', '^', '*', '&'];\n  const sniffer = new CSVSniffer(possibleDelimiters);\n  let text = ''; // We assume that reading first 50K bytes is enough to detect delimiter, line terminator etc.:\n\n  if (file.displayName === 'FileLocal') {\n    const stream = await file.stream({\n      end: 50000\n    });\n    text = await toString(stream);\n  } else if (file.displayName === 'FileRemote') {\n    const stream = await file.stream({\n      size: 100\n    });\n    let bytes = 0;\n    await new Promise((resolve, reject) => {\n      stream.on('data', chunk => {\n        bytes += chunk.length;\n\n        if (bytes > 50000) {\n          stream.pause();\n          resolve();\n        } else {\n          text += chunk.toString();\n        }\n      }).on('end', () => {\n        resolve();\n      });\n    });\n  }\n\n  const results = sniffer.sniff(text);\n  return {\n    delimiter: results.delimiter,\n    quote: results.quoteChar || '\"'\n  };\n};\n\nconst getParseOptions = async (file, keyed) => {\n  let parseOptions = {\n    columns: keyed ? true : null,\n    ltrim: true\n  };\n\n  if (file.descriptor.dialect) {\n    parseOptions.delimiter = file.descriptor.dialect.delimiter || ',';\n    parseOptions.rowDelimiter = file.descriptor.dialect.lineTerminator;\n    parseOptions.quote = file.descriptor.dialect.quoteChar || '\"';\n\n    if (file.descriptor.dialect.doubleQuote !== undefined && file.descriptor.dialect.doubleQuote === false) {\n      parseOptions.escape = '';\n    }\n  } else {\n    const guessedParseOptions = await guessParseOptions(file); // Merge guessed parse options with default one:\n\n    parseOptions = Object.assign(parseOptions, guessedParseOptions);\n  }\n\n  return parseOptions;\n};\n/**\n * This transformer takes binary Uint8Array chunks from a `fetch`\n * and translates them to chunks of strings.\n *\n * @implements {TransformStreamTransformer}\n */\n\n\nclass Uint8ArrayToStringsTransformer {\n  constructor() {\n    this.decoder = new TextDecoder();\n    this.lastString = '';\n  }\n  /**\n   * Receives the next Uint8Array chunk from `fetch` and transforms it.\n   *\n   * @param {Uint8Array} chunk The next binary data chunk.\n   * @param {TransformStreamDefaultController} controller The controller to enqueue the transformed chunks to.\n   */\n\n\n  transform(chunk, controller) {\n    // Decode the current chunk to string and prepend the last string\n    const string = \"\".concat(this.lastString).concat(this.decoder.decode(chunk)); // Extract lines from chunk\n\n    const lines = string.split(/\\r\\n|[\\r\\n]/g); // Save last line, as it might be incomplete\n\n    this.lastString = lines.pop() || ''; // Enqueue each line in the next chunk\n\n    for (const line of lines) {\n      controller.enqueue(line);\n    }\n  }\n  /**\n   * Is called when `fetch` has finished writing to this transform stream.\n   *\n   * @param {TransformStreamDefaultController} controller The controller to enqueue the transformed chunks to.\n   */\n\n\n  flush(controller) {\n    // Is there still a line left? Enqueue it\n    if (this.lastString) {\n      controller.enqueue(this.lastString);\n    }\n  }\n\n}\n\nmodule.exports = {\n  csvParser,\n  getParseOptions,\n  guessParseOptions,\n  Uint8ArrayToStringsTransformer\n};"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/data.js/lib/parser/csv.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}}],"sources":{"node_modules/data.js/lib/parser/csv.js":"\"use strict\";\n\nrequire(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.to-string\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nconst Readable = require('stream').Readable;\n\nconst parse = require('csv-parse');\n\nconst CSVSniffer = require('csv-sniffer')();\n\nconst toString = require('stream-to-string');\n\nconst iconv = require('iconv-lite');\n\nconst csvParser = async function csvParser(file) {\n  let {\n    keyed = false,\n    size = 0\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const parseOptions = await getParseOptions(file, keyed);\n  let stream = await file.stream({\n    size\n  });\n\n  if (file.descriptor.encoding.toLowerCase().replace('-', '') === 'utf8') {\n    return stream.pipe(parse(parseOptions));\n  } else {\n    // non utf-8 files are decoded by iconv-lite module\n    return stream.pipe(iconv.decodeStream(file.descriptor.encoding)).pipe(parse(parseOptions));\n  }\n};\n\nconst guessParseOptions = async file => {\n  const possibleDelimiters = [',', ';', ':', '|', '\\t', '^', '*', '&'];\n  const sniffer = new CSVSniffer(possibleDelimiters);\n  let text = ''; // We assume that reading first 50K bytes is enough to detect delimiter, line terminator etc.:\n\n  if (file.displayName === 'FileLocal') {\n    const stream = await file.stream({\n      end: 50000\n    });\n    text = await toString(stream);\n  } else if (file.displayName === 'FileRemote') {\n    const stream = await file.stream({\n      size: 100\n    });\n    let bytes = 0;\n    await new Promise((resolve, reject) => {\n      stream.on('data', chunk => {\n        bytes += chunk.length;\n\n        if (bytes > 50000) {\n          stream.pause();\n          resolve();\n        } else {\n          text += chunk.toString();\n        }\n      }).on('end', () => {\n        resolve();\n      });\n    });\n  }\n\n  const results = sniffer.sniff(text);\n  return {\n    delimiter: results.delimiter,\n    quote: results.quoteChar || '\"'\n  };\n};\n\nconst getParseOptions = async (file, keyed) => {\n  let parseOptions = {\n    columns: keyed ? true : null,\n    ltrim: true\n  };\n\n  if (file.descriptor.dialect) {\n    parseOptions.delimiter = file.descriptor.dialect.delimiter || ',';\n    parseOptions.rowDelimiter = file.descriptor.dialect.lineTerminator;\n    parseOptions.quote = file.descriptor.dialect.quoteChar || '\"';\n\n    if (file.descriptor.dialect.doubleQuote !== undefined && file.descriptor.dialect.doubleQuote === false) {\n      parseOptions.escape = '';\n    }\n  } else {\n    const guessedParseOptions = await guessParseOptions(file); // Merge guessed parse options with default one:\n\n    parseOptions = Object.assign(parseOptions, guessedParseOptions);\n  }\n\n  return parseOptions;\n};\n/**\n * This transformer takes binary Uint8Array chunks from a `fetch`\n * and translates them to chunks of strings.\n *\n * @implements {TransformStreamTransformer}\n */\n\n\nclass Uint8ArrayToStringsTransformer {\n  constructor() {\n    this.decoder = new TextDecoder();\n    this.lastString = '';\n  }\n  /**\n   * Receives the next Uint8Array chunk from `fetch` and transforms it.\n   *\n   * @param {Uint8Array} chunk The next binary data chunk.\n   * @param {TransformStreamDefaultController} controller The controller to enqueue the transformed chunks to.\n   */\n\n\n  transform(chunk, controller) {\n    // Decode the current chunk to string and prepend the last string\n    const string = \"\".concat(this.lastString).concat(this.decoder.decode(chunk)); // Extract lines from chunk\n\n    const lines = string.split(/\\r\\n|[\\r\\n]/g); // Save last line, as it might be incomplete\n\n    this.lastString = lines.pop() || ''; // Enqueue each line in the next chunk\n\n    for (const line of lines) {\n      controller.enqueue(line);\n    }\n  }\n  /**\n   * Is called when `fetch` has finished writing to this transform stream.\n   *\n   * @param {TransformStreamDefaultController} controller The controller to enqueue the transformed chunks to.\n   */\n\n\n  flush(controller) {\n    // Is there still a line left? Enqueue it\n    if (this.lastString) {\n      controller.enqueue(this.lastString);\n    }\n  }\n\n}\n\nmodule.exports = {\n  csvParser,\n  getParseOptions,\n  guessParseOptions,\n  Uint8ArrayToStringsTransformer\n};"},"lineCount":151}},"error":null,"hash":"e63264c44980c8a26741b605ef9a7d19","cacheData":{"env":{}}}